syntax = "proto3";

import "aelf/core.proto";
import "aelf/options.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "callback_input.proto";

option csharp_namespace = "AElf.Contracts.Report";

// the contract definition: a gRPC service definition.
service ReportContract {
    option (aelf.csharp_state) = "AElf.Contracts.Report.ReportContractState";

    rpc Initialize (InitializeInput) returns (google.protobuf.Empty) {}
  
    rpc QueryOracle (QueryOracleInput) returns (aelf.Hash) {}
  
    rpc CancelQueryOracle (aelf.Hash) returns (google.protobuf.Empty) {}
  
    rpc ConfirmReport (ConfirmReportInput) returns (google.protobuf.Empty) {}
  
    rpc ProposeReport (CallbackInput) returns (Report) {}
    
    rpc MortgageTokens (google.protobuf.Int64Value) returns (google.protobuf.Empty) {}

    rpc WithdrawTokens (google.protobuf.Int64Value) returns (google.protobuf.Empty) {}

    // Notary management.

    rpc ApplyObserver (ApplyObserverInput) returns (google.protobuf.Empty) {}

    rpc QuitObserver (QuitObserverInput) returns (google.protobuf.Empty) {}

    rpc ProposeAdjustApplyObserverFee (google.protobuf.Int64Value) returns (google.protobuf.Empty) {}

    rpc AdjustApplyObserverFee (google.protobuf.Int64Value) returns (google.protobuf.Empty) {}
    
    // Offchain Aggregator Contract management.
    
    rpc AddOffChainAggregator (AddOffChainAggregatorInput) returns (OffChainAggregatorContractInfo) {}
    
    // Merkle tree style aggregator.
    
    rpc GetMerklePath (GetMerklePathInput) returns (aelf.MerklePath) {
        option (aelf.is_view) = true;
    }

    // View methods.
    
    rpc GetReport (GetReportInput) returns (Report) {
        option (aelf.is_view) = true;
    }
    rpc GetSignature (GetSignatureInput) returns (google.protobuf.StringValue) {
        option (aelf.is_view) = true;
    }
    rpc GetOffChainAggregatorContractInfo (aelf.Address) returns (OffChainAggregatorContractInfo) {
        option (aelf.is_view) = true;
    }
    rpc GetReportQueryRecord (aelf.Hash) returns (ReportQueryRecord) {
        option (aelf.is_view) = true;
    }
}

message InitializeInput {
    aelf.Address oracle_contract_address = 1;
    int64 report_fee = 2;
    int64 apply_observer_fee = 3;
}

message QueryOracleInput {
    int64 payment = 1;// Maximum for this query option.
    aelf.Address observer_association_address = 2;
    int32 aggregate_threshold = 3;
    aelf.Address query_manager = 4;
    int32 node_index = 5;
}

message ConfirmReportInput {
    aelf.Address observer_association_address = 1;
    int64 round_id = 2;
    string signature = 3;
}

message ApplyObserverInput {
}

message QuitObserverInput {
}

message Report {
    aelf.Hash query_id = 1;
    int64 epoch_number = 2;
    int64 round_id = 3;
    Observations observations  = 4;
    bytes aggregated_data = 5;
}

message ReportQueryRecord {
    aelf.Address origin_query_manager = 1;
    int64 paid_report_fee = 2;
}

message ObserverList {
    repeated aelf.Address value = 1;
}

message ProposeReportInput {
    repeated aelf.Hash query_id_list = 1;
}

message Observations {
    repeated Observation value = 1;
}

message Observation {
    string key = 1;
    bytes data = 2;
}

message GetSignatureInput {
    aelf.Address observer_association_address = 1;
    int64 round_id = 2;
    aelf.Address address = 3;
}

message OffChainAggregatorContractInfo {
    aelf.Address observer_association_address = 1;
    repeated OffChainInfo off_chain_info = 2;
    string ethereum_contract_address = 3;
    bytes config_digest = 4;
    int32 aggregate_threshold = 5;
    aelf.Address aggregator_contract_address = 6;
    repeated int32 round_ids = 7;
}

message AddOffChainAggregatorInput {
    ObserverList observer_list = 1;
    repeated OffChainInfo off_chain_info = 2;
    string ethereum_contract_address = 3;
    bytes config_digest = 4;
    int32 aggregate_threshold = 5;
    aelf.Address aggregator_contract_address = 6;
}

message OffChainInfo {
    string url_to_query = 1;
    string attribute_to_fetch = 2;
}

message GetReportInput {
    aelf.Address observer_association_address = 1;
    int64 round_id = 2;
}

message GetMerklePathInput {
    aelf.Address observer_association_address = 1;
    int64 round_id = 2;
    int32 node_index = 3;
}

// Events

message ReportProposed {
    option (aelf.is_event) = true;
    Report report = 1;
    aelf.Address observer_association_address = 2;
}

message ReportConfirmed {
    option (aelf.is_event) = true;
    int64 round_id = 1;
    string signature = 2;
    aelf.Address observer_association_address = 3;
}