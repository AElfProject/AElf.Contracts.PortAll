syntax = "proto3";

import "aelf/core.proto";
import "aelf/options.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "callback_input.proto";

option csharp_namespace = "AElf.Contracts.Report";

// the contract definition: a gRPC service definition.
service ReportContract {
    option (aelf.csharp_state) = "AElf.Contracts.Report.ReportContractState";

    rpc Initialize (InitializeInput) returns (google.protobuf.Empty) {}
  
    rpc QueryOracle (QueryOracleInput) returns (aelf.Hash) {}
  
    rpc CancelQueryOracle (aelf.Hash) returns (google.protobuf.Empty) {}
  
    rpc CommitSignature (CommitSignatureInput) returns (google.protobuf.Empty) {}
  
    rpc AppendQueryToReport (CallbackInput) returns (google.protobuf.Empty) {}

    // Notary management.

    rpc ApplyObserver (ApplyObserverInput) returns (google.protobuf.Empty) {}

    rpc QuitObserver (QuitObserverInput) returns (google.protobuf.Empty) {}
    
    rpc GetReport (aelf.Hash) returns (Report) {
        option (aelf.is_view) = true;
    }
    rpc GetRawReport (aelf.Hash) returns (google.protobuf.BytesValue) {
        option (aelf.is_view) = true;
    }
}

message InitializeInput {
    aelf.Address token_contract_address = 1;
    int64 report_fee = 2;
}

message QueryOracleInput {
    int64 payment = 1;// Maximum for this query option.
    aelf.Address aggregator_contract_address = 2;
    repeated aelf.Address designated_nodes = 3;
    string url_to_query = 4;
    string attribute_to_fetch = 5;
    int32 aggregate_threshold = 6;
    aelf.Address query_manager = 7;
}

message CommitSignatureInput {
    aelf.Hash report_id = 1;
    string signature = 2;
}

message ApplyObserverInput {
}

message QuitObserverInput {
}

message VoteObserverInput {
}

message Report {
    
}

// Events

message ReportCreated {
    option (aelf.is_event) = true;
    aelf.Hash report_id = 1;
    Report report = 2;
}