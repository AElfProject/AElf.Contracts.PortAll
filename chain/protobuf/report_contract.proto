syntax = "proto3";

// some core imports for aelf chain types
import "aelf/core.proto";
import "aelf/options.proto";

// import for using the google.protobuf.Empty type.
import "google/protobuf/empty.proto";

// import for using the google.protobuf.Timestamp type
import "google/protobuf/timestamp.proto";

// the name of the C# namespace in which the contract code will be,
// generated code will also be in this namespace.
option csharp_namespace = "AElf.Contracts.Report";

// the contract definition: a gRPC service definition.
service ReportContract {
    option (aelf.csharp_state) = "AElf.Contracts.Report.ReportContractState";

    rpc Initialize (aelf.Address) returns (google.protobuf.Empty) {}
  
    rpc QueryOracle (QueryOracleInput) returns (google.protobuf.Empty) {}
  
    rpc CancelQueryOracle (aelf.Hash) returns (google.protobuf.Empty) {}
  
    rpc CommitSignature (CommitSignatureInput) returns (google.protobuf.Empty) {}
  
    rpc AddQueryToReport (aelf.Hash) returns (google.protobuf.Empty) {}

    // Notary management.

    rpc ApplyNotary (ApplyNotaryInput) returns (google.protobuf.Empty) {}

    rpc QuitNotary (QuitNotaryInput) returns (google.protobuf.Empty) {}

    rpc VoteNotary (VoteNotaryInput) returns (google.protobuf.Empty) {}
    
    rpc GetReport (aelf.Hash) returns (Report) {
        option (aelf.is_view) = true;
    }
    rpc GetRawReport (aelf.Hash) returns (google.protobuf.BytesValue) {
        option (aelf.is_view) = true;
    }
}

message QueryOracleInput {
    int64 payment = 1;// Maximum for this query option.
    CallbackInfo callback_info = 2;
    aelf.Address aggregator_contract_address = 3;
    AddressList designated_node_list = 4;// Will be association address if count is 1.
    string url_to_query = 5;
    string attribute_to_fetch = 6;
    int32 aggregate_threshold = 7;
    aelf.Address query_manager = 8;
}

message CommitSignatureInput {
    aelf.Hash report_id = 1;
    string signature = 2;
}

message ApplyNotaryInput {
}

message QuitNotaryInput {
}

message VoteNotaryInput {
}

message Report {
    
}