/* This files is part of the Hello World smart contract example that is included in Boilerplate.
 * It is only the definition of the contract, implementation is located in the "contract" folder
 * and tests are located in the "test" folder.
 *
 * You can use this as a basic template for new contracts.
 * 
 * When building Boilerplate or the contract project located in the "../contract/AElf.Contracts.Oracle/" 
 * protoc (the protobuf compiler) will be invoked and this file will produce a .c.cs file and .g.cs file, in the 
 * "../contract/AElf.Contracts.Oracle/Protobuf/Generated/" folder. 
 */

// the version of the language, use proto3 for contracts
syntax = "proto3";

// some core imports for aelf chain types
import "aelf/core.proto";
import "aelf/options.proto";

// import for using the google.protobuf.Empty type.
import "google/protobuf/empty.proto";

// import for using the google.protobuf.Timestamp type
import "google/protobuf/timestamp.proto";

// the name of the C# namespace in which the contract code will be,
// generated code will also be in this namespace.
option csharp_namespace = "AElf.Contracts.OracleContract";

// the contract definition: a gRPC service definition.
service OracleContract {

    // the full name of the C# class that will contain the state (here <namespace>.<state-class-name> format).
    option (aelf.csharp_state) = "AElf.Contracts.OracleContract.OracleContractState";
    
    rpc Initialize (google.protobuf.Empty) returns (google.protobuf.Empty) { }
    
    rpc CreateRequest (CreateRequestInput) returns (google.protobuf.Empty) { }

    rpc SendHashData (SendHashDataInput) returns (google.protobuf.Empty) { }

    rpc SendDataWithSalt (SendDataWithSaltInput) returns (google.protobuf.Empty) { }
    
}

message AvailableNodes{
    repeated aelf.Address node_list = 1;
}

message CreateRequestInput{
    string url_to_query = 1;
    string attribute_to_fetch = 2;
    int64 payment = 3;
    aelf.Address callback_address = 4;
    string method_name = 5;
    aelf.Address aggregator = 6;
    int32 data_version = 7;
}

message NewRequest{
    option (aelf.is_event) = true;
    aelf.Hash request_id = 1[(aelf.is_indexed) = true];
    aelf.Address requester = 2;
    int64 payment = 3;
    aelf.Address callback_address = 4;
    string method_name = 5;
    google.protobuf.Timestamp cancel_expiration = 6;
    string url_to_query = 7;
    string attribute_to_fetch = 8;
    aelf.Address aggregator = 9;
    int32 data_version = 10;
}

message CancelRequest{
    option (aelf.is_event) = true;
    bytes request_id = 1 [(aelf.is_indexed) = true];

}

message SendHashDataInput{
    aelf.Hash request_id = 1;
    aelf.Hash hash_data = 2;
}

message GetEnoughData{
    option (aelf.is_event) = true;
    aelf.Hash request_id = 1 [(aelf.is_indexed) = true];
}

message SendDataWithSaltInput{
    aelf.Hash request_id = 1;
    string real_data = 2;
    int64 salt = 3;
}

message UpdatedRequest {
    option (aelf.is_event) = true;
    aelf.Hash request_id = 1 [(aelf.is_indexed) = true];
    string url_to_query = 2;
    string attribute_to_fetch = 3;
    string agreed_value = 4;
}

message Commitment {
    aelf.Hash params_hash = 1;
    int32 data_version = 2;
}

message Response{
    option (aelf.is_event) = true;
    bytes request_id = 1 [(aelf.is_indexed) = true];
    string real_value = 2;

}

message Answer{
    uint64 minimum_responses = 1;
    uint64 max_responses = 2;
    repeated string responses = 3;
}

message AnswerInfo{
    string current_value = 1;
    google.protobuf.Timestamp updated_timestamps = 2;
}