syntax = "proto3";

// some core imports for aelf chain types
import "aelf/core.proto";
import "aelf/options.proto";

// import for using the google.protobuf.Empty type.
import "google/protobuf/empty.proto";

// import for using the google.protobuf.Timestamp type
import "google/protobuf/timestamp.proto";

// the name of the C# namespace in which the contract code will be,
// generated code will also be in this namespace.
option csharp_namespace = "AElf.Contracts.OracleContract";

// the contract definition: a gRPC service definition.
service OracleContract {

  option (aelf.csharp_state) = "AElf.Contracts.OracleContract.OracleContractState";

  rpc Initialize (InitializeInput) returns (google.protobuf.Empty) {}

  // base function

  rpc CreateRequest (CreateRequestInput) returns (google.protobuf.Empty) {}

  rpc Query (QueryInput) returns (google.protobuf.Empty) {}
  
  rpc Commit (CommitInput) returns (google.protobuf.Empty) {}
  
  rpc Reveal (RevealInput) returns (google.protobuf.Empty) {}

  rpc SendHashData (SendHashDataInput) returns (google.protobuf.Empty) {}

  rpc SendDataWithSalt (SendDataWithSaltInput) returns (google.protobuf.Empty) {}

  // manage request
  rpc CancelRequest(CancelRequestInput) returns (google.protobuf.Empty) {}

  rpc RemoveQuestionableQueryInfo(RemoveQuestionableQueryInfoInput) returns (google.protobuf.Empty) {}

  rpc RemoveRedundantRoundData(RemoveRedundantRoundDataInput) returns (google.protobuf.Empty) {}

  // manage nodes
  rpc DepositEscrow(DepositEscrowInput) returns (google.protobuf.Empty) {}

  rpc WithdrawEscrow(WithdrawEscrowInput) returns (google.protobuf.Empty) {}

  rpc WithdrawRevenue(google.protobuf.Empty) returns (google.protobuf.Empty){}

  rpc AddNode(AddNodeInput) returns (google.protobuf.Empty) {}

  rpc RemoveNode(aelf.Address) returns (google.protobuf.Empty) {}

  rpc AddQuestionableNode(aelf.Address) returns (google.protobuf.Empty) {}

  rpc RemoveQuestionableNode(aelf.Address) returns (google.protobuf.Empty) {}

  rpc RemoveNodeStatistic(aelf.Address) returns (google.protobuf.Empty) {}

  // controller
  rpc ChangeController(aelf.Address) returns (google.protobuf.Empty) {}

  // config setting

  rpc SetThreshold(SetThresholdInput) returns(google.protobuf.Empty){}

  // view methods

  rpc GetQuestionableQuery(GetQuestionableQueryInput) returns (QuestionableQueryInfo) {
    option (aelf.is_view) = true;
  }

  rpc GetController (google.protobuf.Empty) returns (aelf.Address) {
    option (aelf.is_view) = true;
  }

  rpc GetNodeStatistic (google.protobuf.Empty) returns (AllNodeStatisticInfo) {
    option (aelf.is_view) = true;
  }

  rpc GetAvailableAndQuestionableNode (google.protobuf.Empty) returns (WorkNodes){
    option (aelf.is_view) = true;
  }
}

message InitializeInput{
  int32 default_minimum_available_nodes_count = 1;
  int32 default_threshold_responses = 2;
  int32 default_threshold_to_update_data = 3;
  int32 expiration_seconds = 4;
  int64 minimum_escrow = 5;
  int64 clear_redundant_revenue = 6;
}

message AvailableNodes{
  repeated aelf.Address node_list = 1;
}

message WorkNodes{
  repeated aelf.Address available_nodes = 1;
  repeated aelf.Address questionable_nodes = 2;
}

message CreateRequestInput {
  string url_to_query = 1;
  string attribute_to_fetch = 2;
  int64 payment = 3;
  aelf.Address callback_address = 4;
  string method_name = 5;
  aelf.Address aggregator_address = 6;
  AvailableNodes designated_nodes = 7;
  int64 nonce = 8;
}

message QueryInput {
  int64 payment = 1;// Maximum for this query option.
  CallbackInfo callback_info = 2;
  aelf.Address aggregator_contract_address = 3;
  AddressList designated_node_list = 4;// Will be association address if count is 1.
  string url_to_query = 5;
  string attribute_to_fetch = 6;
}

message CallbackInfo {
  aelf.Address contract_address = 1;
  string method_name = 2;
}

message AddressList {
  repeated aelf.Address value = 1;
}

message QueryRecord {
  aelf.Hash query_hash = 1;
  AddressList designated_node_list = 2;
  aelf.Address aggregator_contract_address = 3;
  google.protobuf.Timestamp expiration_timestamp = 4;
  bool is_sufficient_commitments_collected = 5;
  bool is_sufficient_data_collected = 6;
  bytes final_result = 7;
  int64 payment = 8;
  CallbackInfo callback_info = 9;
}

message CommitInput {
  aelf.Hash query_id = 1;
  aelf.Hash commitment = 2;
}

message RevealInput {
  aelf.Hash query_id = 1;
  bytes data = 2;
  aelf.Hash salt = 3;
}

message SendHashDataInput{
  aelf.Hash request_id = 1;
  aelf.Hash hash_data = 2;
  int64 payment = 3;
  aelf.Address callback_address = 4;
  string method_name = 5;
  google.protobuf.Timestamp cancel_expiration = 6;
}

message SendDataWithSaltInput{
  aelf.Hash request_id = 1;
  bytes real_data = 2;
  string salt = 3;
  int64 payment = 4;
  aelf.Address callback_address = 5;
  string method_name = 6;
  google.protobuf.Timestamp cancel_expiration = 7;
}

message Commitment {
  aelf.Hash params_hash = 1;
  AvailableNodes designated_nodes = 2;
  aelf.Address aggregator = 3;
  google.protobuf.Timestamp cancel_expiration = 4;
}

message RoundAnswerDetailInfo{
  map<int64, AnswerDetail> RoundAnswers = 1;
}

message AnswerDetail{
  int32 hash_data_responses = 1;
  int32 data_with_salt_responses = 2;
  repeated NodeWithDetailData responses = 3;
}

message NodeWithDetailData{
  aelf.Address node = 1;
  aelf.Hash hash_data = 2;
  bytes real_data = 3;
}

message RoundLastUpdateAnswer{
  map<int64, LastUpdateAnswer> RoundAnswers = 1;
}

message LastUpdateAnswer{
  bytes last_value = 1;
  google.protobuf.Timestamp updated_timestamps = 2;
}

message RequestIds{
  repeated aelf.Hash requests = 1;
}

message Rounds{
  repeated int64 round_list = 1;
}

message CancelRequestInput{
  aelf.Hash request_id = 1;
}

message DepositEscrowInput{
  int64 amount = 1;
}

message WithdrawEscrowInput{
  int64 amount = 1;
}

message NodeInfo{
  int64 escrow = 1;
  int64 withdrawable = 2;

}

message StatisticInfo{
  int64 query_count = 1;
  int64 valid_count = 2;
}

message NodeStatistic{
  aelf.Address node = 1;
  StatisticInfo statistic_info = 2;
}

message AllNodeStatisticInfo{
  repeated NodeStatistic all_node_statistic_info = 1;
}

message AddNodeInput{
  aelf.Address node = 1;
}

message GetQuestionAbleRoundsInput{
  aelf.Hash request_id = 1;
}

message GetQuestionableQueryInput{
  aelf.Hash request_id = 1;
  int64 round_id = 2;
}

message RequestQuestionableQueryInfo{
  map<int64, QuestionableQueryInfo> questionable_query_information = 1;
}

message QuestionableQueryInfo{
  google.protobuf.Timestamp update_time = 1;
  repeated QuestionableNodeInfo all_questionable_nodes = 2;
}

message QuestionableNodeInfo{
  aelf.Address node = 1;
  bytes real_value = 2;
}

message RemoveQuestionableQueryInfoInput{
  aelf.Hash request_id = 1;
}

message RemoveRedundantRoundDataInput {
  aelf.Hash request_id = 1;
}

message SetThresholdInput{
  int32 default_minimum_available_nodes_count = 1;
  int32 default_threshold_responses = 2;
  int32 default_threshold_to_update_data = 3;
}

message ResultList {
  repeated bytes results = 1;
  repeated int32 frequencies = 2;
}

// Events
message RequestCreated {
  option (aelf.is_event) = true;
  aelf.Hash request_id = 1;
  int64 round_id = 2;
  aelf.Address requester = 3;
  int64 payment = 4;
  aelf.Address callback_address = 5;
  string method_name = 6;
  google.protobuf.Timestamp cancel_expiration = 7;
  string url_to_query = 8;
  string attribute_to_fetch = 9;
  aelf.Address aggregator = 10;
  AvailableNodes designated_nodes = 11;
}

message RequestCancelled {
  option (aelf.is_event) = true;
  bytes request_id = 1;
  int64 round_id = 2;
  google.protobuf.Timestamp cancel_time = 3;
}

message SufficientDataCollected {
  option (aelf.is_event) = true;
  aelf.Hash request_id = 1;
}

message SufficientCommitmentsCollected {
  option (aelf.is_event) = true;
  aelf.Hash query_id = 1;
}

message QueryCompleted {
  option (aelf.is_event) = true;
  aelf.Hash query_id = 1;
  bytes result = 2;
}