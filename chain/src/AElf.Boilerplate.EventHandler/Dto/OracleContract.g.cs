// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: oracle_contract.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace AElf.Contracts.Oracle {

  /// <summary>Holder for reflection information generated from oracle_contract.proto</summary>
  internal static partial class OracleContractReflection {

    #region Descriptor
    /// <summary>File descriptor for oracle_contract.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static OracleContractReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVvcmFjbGVfY29udHJhY3QucHJvdG8aD2FlbGYvY29yZS5wcm90bxoSYWVs",
            "Zi9vcHRpb25zLnByb3RvGhtnb29nbGUvcHJvdG9idWYvZW1wdHkucHJvdG8a",
            "H2dvb2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG8aHmdvb2dsZS9wcm90",
            "b2J1Zi93cmFwcGVycy5wcm90byK3AQoPSW5pdGlhbGl6ZUlucHV0EiIKGm1p",
            "bmltdW1fb3JhY2xlX25vZGVzX2NvdW50GAEgASgFEiAKGGRlZmF1bHRfcmV2",
            "ZWFsX3RocmVzaG9sZBgCIAEoBRIjChtkZWZhdWx0X2FnZ3JlZ2F0ZV90aHJl",
            "c2hvbGQYAyABKAUSIgoaZGVmYXVsdF9leHBpcmF0aW9uX3NlY29uZHMYBCAB",
            "KAUSFQoNaXNfY2hhcmdlX2ZlZRgFIAEoCCLvAQoKUXVlcnlJbnB1dBIPCgdw",
            "YXltZW50GAEgASgDEiQKDWNhbGxiYWNrX2luZm8YAiABKAsyDS5DYWxsYmFj",
            "a0luZm8SMgobYWdncmVnYXRvcl9jb250cmFjdF9hZGRyZXNzGAMgASgLMg0u",
            "YWVsZi5BZGRyZXNzEioKFGRlc2lnbmF0ZWRfbm9kZV9saXN0GAQgASgLMgwu",
            "QWRkcmVzc0xpc3QSHgoKcXVlcnlfaW5mbxgFIAEoCzIKLlF1ZXJ5SW5mbxIb",
            "ChNhZ2dyZWdhdGVfdGhyZXNob2xkGAYgASgFEg0KBXRva2VuGAcgASgJIkwK",
            "DENhbGxiYWNrSW5mbxInChBjb250cmFjdF9hZGRyZXNzGAEgASgLMg0uYWVs",
            "Zi5BZGRyZXNzEhMKC21ldGhvZF9uYW1lGAIgASgJIisKC0FkZHJlc3NMaXN0",
            "EhwKBXZhbHVlGAEgAygLMg0uYWVsZi5BZGRyZXNzIs0ECgtRdWVyeVJlY29y",
            "ZBIqChRkZXNpZ25hdGVkX25vZGVfbGlzdBgBIAEoCzIMLkFkZHJlc3NMaXN0",
            "EjIKG2FnZ3JlZ2F0b3JfY29udHJhY3RfYWRkcmVzcxgCIAEoCzINLmFlbGYu",
            "QWRkcmVzcxI4ChRleHBpcmF0aW9uX3RpbWVzdGFtcBgDIAEoCzIaLmdvb2ds",
            "ZS5wcm90b2J1Zi5UaW1lc3RhbXASKwojaXNfc3VmZmljaWVudF9jb21taXRt",
            "ZW50c19jb2xsZWN0ZWQYBCABKAgSJAocaXNfc3VmZmljaWVudF9kYXRhX2Nv",
            "bGxlY3RlZBgFIAEoCBIUCgxmaW5hbF9yZXN1bHQYBiABKAkSDwoHcGF5bWVu",
            "dBgHIAEoAxIkCg1jYWxsYmFja19pbmZvGAggASgLMg0uQ2FsbGJhY2tJbmZv",
            "EhwKCHF1ZXJ5X2lkGAkgASgLMgouYWVsZi5IYXNoEhsKE2FnZ3JlZ2F0ZV90",
            "aHJlc2hvbGQYCiABKAUSIwoMcXVlcnlfc2VuZGVyGAsgASgLMg0uYWVsZi5B",
            "ZGRyZXNzEiAKGGlzX2NvbW1pdF9zdGFnZV9maW5pc2hlZBgMIAEoCBIZChFj",
            "b21taXRtZW50c19jb3VudBgNIAEoBRIUCgxpc19jYW5jZWxsZWQYDiABKAgS",
            "HgoKcXVlcnlfaW5mbxgPIAEoCzIKLlF1ZXJ5SW5mbxINCgV0b2tlbhgQIAEo",
            "CRIiCgxkYXRhX3JlY29yZHMYESABKAsyDC5EYXRhUmVjb3JkcyJLCgtDb21t",
            "aXRJbnB1dBIcCghxdWVyeV9pZBgBIAEoCzIKLmFlbGYuSGFzaBIeCgpjb21t",
            "aXRtZW50GAIgASgLMgouYWVsZi5IYXNoIlMKC1JldmVhbElucHV0EhwKCHF1",
            "ZXJ5X2lkGAEgASgLMgouYWVsZi5IYXNoEgwKBGRhdGEYAiABKAkSGAoEc2Fs",
            "dBgDIAEoCzIKLmFlbGYuSGFzaCJzCg1Db21taXRtZW50TWFwEigKBXZhbHVl",
            "GAEgAygLMhkuQ29tbWl0bWVudE1hcC5WYWx1ZUVudHJ5GjgKClZhbHVlRW50",
            "cnkSCwoDa2V5GAEgASgJEhkKBXZhbHVlGAIgASgLMgouYWVsZi5IYXNoOgI4",
            "ASKAAQoTT3JhY2xlTm9kZVRocmVzaG9sZBIiChptaW5pbXVtX29yYWNsZV9u",
            "b2Rlc19jb3VudBgBIAEoBRIgChhkZWZhdWx0X3JldmVhbF90aHJlc2hvbGQY",
            "AiABKAUSIwobZGVmYXVsdF9hZ2dyZWdhdGVfdGhyZXNob2xkGAMgASgFIjIK",
            "ClJlc3VsdExpc3QSDwoHcmVzdWx0cxgBIAMoCRITCgtmcmVxdWVuY2llcxgC",
            "IAMoBSI6CgpEYXRhUmVjb3JkEh4KB2FkZHJlc3MYASABKAsyDS5hZWxmLkFk",
            "ZHJlc3MSDAoEZGF0YRgCIAEoCSIpCgtEYXRhUmVjb3JkcxIaCgV2YWx1ZRgB",
            "IAMoCzILLkRhdGFSZWNvcmQilQEKC1BsYWluUmVzdWx0EiIKDGRhdGFfcmVj",
            "b3JkcxgBIAEoCzIMLkRhdGFSZWNvcmRzEjMKHG9ic2VydmVyX2Fzc29jaWF0",
            "aW9uX2FkZHJlc3MYAiABKAsyDS5hZWxmLkFkZHJlc3MSHgoKcXVlcnlfaW5m",
            "bxgDIAEoCzIKLlF1ZXJ5SW5mbxINCgV0b2tlbhgEIAEoCSJSCg9Mb2NrVG9r",
            "ZW5zSW5wdXQSKgoTb3JhY2xlX25vZGVfYWRkcmVzcxgBIAEoCzINLmFlbGYu",
            "QWRkcmVzcxITCgtsb2NrX2Ftb3VudBgCIAEoAyJYChFVbmxvY2tUb2tlbnNJ",
            "bnB1dBIqChNvcmFjbGVfbm9kZV9hZGRyZXNzGAEgASgLMg0uYWVsZi5BZGRy",
            "ZXNzEhcKD3dpdGhkcmF3X2Ftb3VudBgCIAEoAyI+CglRdWVyeUluZm8SFAoM",
            "dXJsX3RvX3F1ZXJ5GAEgASgJEhsKE2F0dHJpYnV0ZXNfdG9fZmV0Y2gYAiAD",
            "KAki4QIKDFF1ZXJ5Q3JlYXRlZBIPCgdwYXltZW50GAEgASgDEiQKDWNhbGxi",
            "YWNrX2luZm8YAiABKAsyDS5DYWxsYmFja0luZm8SMgobYWdncmVnYXRvcl9j",
            "b250cmFjdF9hZGRyZXNzGAMgASgLMg0uYWVsZi5BZGRyZXNzEioKFGRlc2ln",
            "bmF0ZWRfbm9kZV9saXN0GAQgASgLMgwuQWRkcmVzc0xpc3QSHgoKcXVlcnlf",
            "aW5mbxgFIAEoCzIKLlF1ZXJ5SW5mbxIbChNhZ2dyZWdhdGVfdGhyZXNob2xk",
            "GAYgASgFEiMKDHF1ZXJ5X3NlbmRlchgHIAEoCzINLmFlbGYuQWRkcmVzcxIc",
            "CghxdWVyeV9pZBgIIAEoCzIKLmFlbGYuSGFzaBINCgV0b2tlbhgJIAEoCRIl",
            "Ch1tYXhpbXVtX3Blcm1pc3NpYmxlX2RldmlhdGlvbhgKIAEoBToEoLsYASI0",
            "Cg5RdWVyeUNhbmNlbGxlZBIcCghxdWVyeV9pZBgBIAEoCzIKLmFlbGYuSGFz",
            "aDoEoLsYASJECh5TdWZmaWNpZW50Q29tbWl0bWVudHNDb2xsZWN0ZWQSHAoI",
            "cXVlcnlfaWQYASABKAsyCi5hZWxmLkhhc2g6BKC7GAEiewoJQ29tbWl0dGVk",
            "EhwKCHF1ZXJ5X2lkGAEgASgLMgouYWVsZi5IYXNoEioKE29yYWNsZV9ub2Rl",
            "X2FkZHJlc3MYAiABKAsyDS5hZWxmLkFkZHJlc3MSHgoKY29tbWl0bWVudBgD",
            "IAEoCzIKLmFlbGYuSGFzaDoEoLsYASKzAQoSQ29tbWl0bWVudFJldmVhbGVk",
            "EhwKCHF1ZXJ5X2lkGAEgASgLMgouYWVsZi5IYXNoEioKE29yYWNsZV9ub2Rl",
            "X2FkZHJlc3MYAiABKAsyDS5hZWxmLkFkZHJlc3MSHgoKY29tbWl0bWVudBgD",
            "IAEoCzIKLmFlbGYuSGFzaBITCgtyZXZlYWxfZGF0YRgEIAEoCRIYCgRzYWx0",
            "GAUgASgLMgouYWVsZi5IYXNoOgSguxgBIrcBChZDb21taXRtZW50UmV2ZWFs",
            "RmFpbGVkEhwKCHF1ZXJ5X2lkGAEgASgLMgouYWVsZi5IYXNoEioKE29yYWNs",
            "ZV9ub2RlX2FkZHJlc3MYAiABKAsyDS5hZWxmLkFkZHJlc3MSHgoKY29tbWl0",
            "bWVudBgDIAEoCzIKLmFlbGYuSGFzaBITCgtyZXZlYWxfZGF0YRgEIAEoCRIY",
            "CgRzYWx0GAUgASgLMgouYWVsZi5IYXNoOgSguxgBIlMKHVF1ZXJ5Q29tcGxl",
            "dGVkV2l0aEFnZ3JlZ2F0aW9uEhwKCHF1ZXJ5X2lkGAEgASgLMgouYWVsZi5I",
            "YXNoEg4KBnJlc3VsdBgCIAEoCToEoLsYASJkCiBRdWVyeUNvbXBsZXRlZFdp",
            "dGhvdXRBZ2dyZWdhdGlvbhIcCghxdWVyeV9pZBgBIAEoCzIKLmFlbGYuSGFz",
            "aBIcCgZyZXN1bHQYAiABKAsyDC5QbGFpblJlc3VsdDoEoLsYASJ7CgtUb2tl",
            "bkxvY2tlZBIqChNvcmFjbGVfbm9kZV9hZGRyZXNzGAEgASgLMg0uYWVsZi5B",
            "ZGRyZXNzEiMKDGZyb21fYWRkcmVzcxgCIAEoCzINLmFlbGYuQWRkcmVzcxIV",
            "Cg1sb2NrZWRfYW1vdW50GAMgASgDOgSguxgBMrMKCg5PcmFjbGVDb250cmFj",
            "dBI4CgpJbml0aWFsaXplEhAuSW5pdGlhbGl6ZUlucHV0GhYuZ29vZ2xlLnBy",
            "b3RvYnVmLkVtcHR5IgASRgoYSW5pdGlhbGl6ZUFuZENyZWF0ZVRva2VuEhAu",
            "SW5pdGlhbGl6ZUlucHV0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASIgoF",
            "UXVlcnkSCy5RdWVyeUlucHV0GgouYWVsZi5IYXNoIgASMAoGQ29tbWl0Egwu",
            "Q29tbWl0SW5wdXQaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiABIwCgZSZXZl",
            "YWwSDC5SZXZlYWxJbnB1dBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIAEjMK",
            "C0NhbmNlbFF1ZXJ5EgouYWVsZi5IYXNoGhYuZ29vZ2xlLnByb3RvYnVmLkVt",
            "cHR5IgASOwoQQ2hhbmdlQ29udHJvbGxlchINLmFlbGYuQWRkcmVzcxoWLmdv",
            "b2dsZS5wcm90b2J1Zi5FbXB0eSIAEjgKCkxvY2tUb2tlbnMSEC5Mb2NrVG9r",
            "ZW5zSW5wdXQaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiABI8CgxVbmxvY2tU",
            "b2tlbnMSEi5VbmxvY2tUb2tlbnNJbnB1dBoWLmdvb2dsZS5wcm90b2J1Zi5F",
            "bXB0eSIAEj4KDFNldFRocmVzaG9sZBIULk9yYWNsZU5vZGVUaHJlc2hvbGQa",
            "Fi5nb29nbGUucHJvdG9idWYuRW1wdHkiABJXCh5DaGFuZ2VEZWZhdWx0RXhw",
            "aXJhdGlvblNlY29uZHMSGy5nb29nbGUucHJvdG9idWYuSW50MzJWYWx1ZRoW",
            "Lmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIAEkMKD0VuYWJsZUNoYXJnZUZlZRIW",
            "Lmdvb2dsZS5wcm90b2J1Zi5FbXB0eRoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0",
            "eSIAEj0KDUdldENvbnRyb2xsZXISFi5nb29nbGUucHJvdG9idWYuRW1wdHka",
            "DS5hZWxmLkFkZHJlc3MiBYiJ9wEBEjEKDkdldFF1ZXJ5UmVjb3JkEgouYWVs",
            "Zi5IYXNoGgwuUXVlcnlSZWNvcmQiBYiJ9wEBEjUKEEdldENvbW1pdG1lbnRN",
            "YXASCi5hZWxmLkhhc2gaDi5Db21taXRtZW50TWFwIgWIifcBARJTChRHZXRP",
            "cmFjbGVUb2tlblN5bWJvbBIWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eRocLmdv",
            "b2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZSIFiIn3AQESSgoVR2V0TG9ja2Vk",
            "VG9rZW5zQW1vdW50Eg0uYWVsZi5BZGRyZXNzGhsuZ29vZ2xlLnByb3RvYnVm",
            "LkludDY0VmFsdWUiBYiJ9wEBEkMKDEdldFRocmVzaG9sZBIWLmdvb2dsZS5w",
            "cm90b2J1Zi5FbXB0eRoULk9yYWNsZU5vZGVUaHJlc2hvbGQiBYiJ9wEBElkK",
            "G0dldERlZmF1bHRFeHBpcmF0aW9uU2Vjb25kcxIWLmdvb2dsZS5wcm90b2J1",
            "Zi5FbXB0eRobLmdvb2dsZS5wcm90b2J1Zi5JbnQzMlZhbHVlIgWIifcBARI1",
            "ChJHZXRIZWxwZnVsTm9kZUxpc3QSCi5hZWxmLkhhc2gaDC5BZGRyZXNzTGlz",
            "dCIFiIn3AQEaLrLM9gEpQUVsZi5Db250cmFjdHMuT3JhY2xlLk9yYWNsZUNv",
            "bnRyYWN0U3RhdGVCGKoCFUFFbGYuQ29udHJhY3RzLk9yYWNsZWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::AElf.Types.CoreReflection.Descriptor, global::AElf.OptionsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Oracle.InitializeInput), global::AElf.Contracts.Oracle.InitializeInput.Parser, new[]{ "MinimumOracleNodesCount", "DefaultRevealThreshold", "DefaultAggregateThreshold", "DefaultExpirationSeconds", "IsChargeFee" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Oracle.QueryInput), global::AElf.Contracts.Oracle.QueryInput.Parser, new[]{ "Payment", "CallbackInfo", "AggregatorContractAddress", "DesignatedNodeList", "QueryInfo", "AggregateThreshold", "Token" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Oracle.CallbackInfo), global::AElf.Contracts.Oracle.CallbackInfo.Parser, new[]{ "ContractAddress", "MethodName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Oracle.AddressList), global::AElf.Contracts.Oracle.AddressList.Parser, new[]{ "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Oracle.QueryRecord), global::AElf.Contracts.Oracle.QueryRecord.Parser, new[]{ "DesignatedNodeList", "AggregatorContractAddress", "ExpirationTimestamp", "IsSufficientCommitmentsCollected", "IsSufficientDataCollected", "FinalResult", "Payment", "CallbackInfo", "QueryId", "AggregateThreshold", "QuerySender", "IsCommitStageFinished", "CommitmentsCount", "IsCancelled", "QueryInfo", "Token", "DataRecords" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Oracle.CommitInput), global::AElf.Contracts.Oracle.CommitInput.Parser, new[]{ "QueryId", "Commitment" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Oracle.RevealInput), global::AElf.Contracts.Oracle.RevealInput.Parser, new[]{ "QueryId", "Data", "Salt" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Oracle.CommitmentMap), global::AElf.Contracts.Oracle.CommitmentMap.Parser, new[]{ "Value" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Oracle.OracleNodeThreshold), global::AElf.Contracts.Oracle.OracleNodeThreshold.Parser, new[]{ "MinimumOracleNodesCount", "DefaultRevealThreshold", "DefaultAggregateThreshold" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Oracle.ResultList), global::AElf.Contracts.Oracle.ResultList.Parser, new[]{ "Results", "Frequencies" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Oracle.DataRecord), global::AElf.Contracts.Oracle.DataRecord.Parser, new[]{ "Address", "Data" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Oracle.DataRecords), global::AElf.Contracts.Oracle.DataRecords.Parser, new[]{ "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Oracle.PlainResult), global::AElf.Contracts.Oracle.PlainResult.Parser, new[]{ "DataRecords", "ObserverAssociationAddress", "QueryInfo", "Token" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Oracle.LockTokensInput), global::AElf.Contracts.Oracle.LockTokensInput.Parser, new[]{ "OracleNodeAddress", "LockAmount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Oracle.UnlockTokensInput), global::AElf.Contracts.Oracle.UnlockTokensInput.Parser, new[]{ "OracleNodeAddress", "WithdrawAmount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Oracle.QueryInfo), global::AElf.Contracts.Oracle.QueryInfo.Parser, new[]{ "UrlToQuery", "AttributesToFetch" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Oracle.QueryCreated), global::AElf.Contracts.Oracle.QueryCreated.Parser, new[]{ "Payment", "CallbackInfo", "AggregatorContractAddress", "DesignatedNodeList", "QueryInfo", "AggregateThreshold", "QuerySender", "QueryId", "Token", "MaximumPermissibleDeviation" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Oracle.QueryCancelled), global::AElf.Contracts.Oracle.QueryCancelled.Parser, new[]{ "QueryId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Oracle.SufficientCommitmentsCollected), global::AElf.Contracts.Oracle.SufficientCommitmentsCollected.Parser, new[]{ "QueryId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Oracle.Committed), global::AElf.Contracts.Oracle.Committed.Parser, new[]{ "QueryId", "OracleNodeAddress", "Commitment" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Oracle.CommitmentRevealed), global::AElf.Contracts.Oracle.CommitmentRevealed.Parser, new[]{ "QueryId", "OracleNodeAddress", "Commitment", "RevealData", "Salt" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Oracle.CommitmentRevealFailed), global::AElf.Contracts.Oracle.CommitmentRevealFailed.Parser, new[]{ "QueryId", "OracleNodeAddress", "Commitment", "RevealData", "Salt" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Oracle.QueryCompletedWithAggregation), global::AElf.Contracts.Oracle.QueryCompletedWithAggregation.Parser, new[]{ "QueryId", "Result" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Oracle.QueryCompletedWithoutAggregation), global::AElf.Contracts.Oracle.QueryCompletedWithoutAggregation.Parser, new[]{ "QueryId", "Result" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Oracle.TokenLocked), global::AElf.Contracts.Oracle.TokenLocked.Parser, new[]{ "OracleNodeAddress", "FromAddress", "LockedAmount" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  internal sealed partial class InitializeInput : pb::IMessage<InitializeInput>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InitializeInput> _parser = new pb::MessageParser<InitializeInput>(() => new InitializeInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InitializeInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Oracle.OracleContractReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeInput(InitializeInput other) : this() {
      minimumOracleNodesCount_ = other.minimumOracleNodesCount_;
      defaultRevealThreshold_ = other.defaultRevealThreshold_;
      defaultAggregateThreshold_ = other.defaultAggregateThreshold_;
      defaultExpirationSeconds_ = other.defaultExpirationSeconds_;
      isChargeFee_ = other.isChargeFee_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeInput Clone() {
      return new InitializeInput(this);
    }

    /// <summary>Field number for the "minimum_oracle_nodes_count" field.</summary>
    public const int MinimumOracleNodesCountFieldNumber = 1;
    private int minimumOracleNodesCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinimumOracleNodesCount {
      get { return minimumOracleNodesCount_; }
      set {
        minimumOracleNodesCount_ = value;
      }
    }

    /// <summary>Field number for the "default_reveal_threshold" field.</summary>
    public const int DefaultRevealThresholdFieldNumber = 2;
    private int defaultRevealThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefaultRevealThreshold {
      get { return defaultRevealThreshold_; }
      set {
        defaultRevealThreshold_ = value;
      }
    }

    /// <summary>Field number for the "default_aggregate_threshold" field.</summary>
    public const int DefaultAggregateThresholdFieldNumber = 3;
    private int defaultAggregateThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefaultAggregateThreshold {
      get { return defaultAggregateThreshold_; }
      set {
        defaultAggregateThreshold_ = value;
      }
    }

    /// <summary>Field number for the "default_expiration_seconds" field.</summary>
    public const int DefaultExpirationSecondsFieldNumber = 4;
    private int defaultExpirationSeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefaultExpirationSeconds {
      get { return defaultExpirationSeconds_; }
      set {
        defaultExpirationSeconds_ = value;
      }
    }

    /// <summary>Field number for the "is_charge_fee" field.</summary>
    public const int IsChargeFeeFieldNumber = 5;
    private bool isChargeFee_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsChargeFee {
      get { return isChargeFee_; }
      set {
        isChargeFee_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InitializeInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InitializeInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MinimumOracleNodesCount != other.MinimumOracleNodesCount) return false;
      if (DefaultRevealThreshold != other.DefaultRevealThreshold) return false;
      if (DefaultAggregateThreshold != other.DefaultAggregateThreshold) return false;
      if (DefaultExpirationSeconds != other.DefaultExpirationSeconds) return false;
      if (IsChargeFee != other.IsChargeFee) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MinimumOracleNodesCount != 0) hash ^= MinimumOracleNodesCount.GetHashCode();
      if (DefaultRevealThreshold != 0) hash ^= DefaultRevealThreshold.GetHashCode();
      if (DefaultAggregateThreshold != 0) hash ^= DefaultAggregateThreshold.GetHashCode();
      if (DefaultExpirationSeconds != 0) hash ^= DefaultExpirationSeconds.GetHashCode();
      if (IsChargeFee != false) hash ^= IsChargeFee.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MinimumOracleNodesCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MinimumOracleNodesCount);
      }
      if (DefaultRevealThreshold != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DefaultRevealThreshold);
      }
      if (DefaultAggregateThreshold != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DefaultAggregateThreshold);
      }
      if (DefaultExpirationSeconds != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DefaultExpirationSeconds);
      }
      if (IsChargeFee != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsChargeFee);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MinimumOracleNodesCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MinimumOracleNodesCount);
      }
      if (DefaultRevealThreshold != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DefaultRevealThreshold);
      }
      if (DefaultAggregateThreshold != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DefaultAggregateThreshold);
      }
      if (DefaultExpirationSeconds != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DefaultExpirationSeconds);
      }
      if (IsChargeFee != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsChargeFee);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MinimumOracleNodesCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinimumOracleNodesCount);
      }
      if (DefaultRevealThreshold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DefaultRevealThreshold);
      }
      if (DefaultAggregateThreshold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DefaultAggregateThreshold);
      }
      if (DefaultExpirationSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DefaultExpirationSeconds);
      }
      if (IsChargeFee != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InitializeInput other) {
      if (other == null) {
        return;
      }
      if (other.MinimumOracleNodesCount != 0) {
        MinimumOracleNodesCount = other.MinimumOracleNodesCount;
      }
      if (other.DefaultRevealThreshold != 0) {
        DefaultRevealThreshold = other.DefaultRevealThreshold;
      }
      if (other.DefaultAggregateThreshold != 0) {
        DefaultAggregateThreshold = other.DefaultAggregateThreshold;
      }
      if (other.DefaultExpirationSeconds != 0) {
        DefaultExpirationSeconds = other.DefaultExpirationSeconds;
      }
      if (other.IsChargeFee != false) {
        IsChargeFee = other.IsChargeFee;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MinimumOracleNodesCount = input.ReadInt32();
            break;
          }
          case 16: {
            DefaultRevealThreshold = input.ReadInt32();
            break;
          }
          case 24: {
            DefaultAggregateThreshold = input.ReadInt32();
            break;
          }
          case 32: {
            DefaultExpirationSeconds = input.ReadInt32();
            break;
          }
          case 40: {
            IsChargeFee = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MinimumOracleNodesCount = input.ReadInt32();
            break;
          }
          case 16: {
            DefaultRevealThreshold = input.ReadInt32();
            break;
          }
          case 24: {
            DefaultAggregateThreshold = input.ReadInt32();
            break;
          }
          case 32: {
            DefaultExpirationSeconds = input.ReadInt32();
            break;
          }
          case 40: {
            IsChargeFee = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  internal sealed partial class QueryInput : pb::IMessage<QueryInput>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<QueryInput> _parser = new pb::MessageParser<QueryInput>(() => new QueryInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Oracle.OracleContractReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryInput(QueryInput other) : this() {
      payment_ = other.payment_;
      callbackInfo_ = other.callbackInfo_ != null ? other.callbackInfo_.Clone() : null;
      aggregatorContractAddress_ = other.aggregatorContractAddress_ != null ? other.aggregatorContractAddress_.Clone() : null;
      designatedNodeList_ = other.designatedNodeList_ != null ? other.designatedNodeList_.Clone() : null;
      queryInfo_ = other.queryInfo_ != null ? other.queryInfo_.Clone() : null;
      aggregateThreshold_ = other.aggregateThreshold_;
      token_ = other.token_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryInput Clone() {
      return new QueryInput(this);
    }

    /// <summary>Field number for the "payment" field.</summary>
    public const int PaymentFieldNumber = 1;
    private long payment_;
    /// <summary>
    /// Maximum for this query option.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Payment {
      get { return payment_; }
      set {
        payment_ = value;
      }
    }

    /// <summary>Field number for the "callback_info" field.</summary>
    public const int CallbackInfoFieldNumber = 2;
    private global::AElf.Contracts.Oracle.CallbackInfo callbackInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.Oracle.CallbackInfo CallbackInfo {
      get { return callbackInfo_; }
      set {
        callbackInfo_ = value;
      }
    }

    /// <summary>Field number for the "aggregator_contract_address" field.</summary>
    public const int AggregatorContractAddressFieldNumber = 3;
    private global::AElf.Types.Address aggregatorContractAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address AggregatorContractAddress {
      get { return aggregatorContractAddress_; }
      set {
        aggregatorContractAddress_ = value;
      }
    }

    /// <summary>Field number for the "designated_node_list" field.</summary>
    public const int DesignatedNodeListFieldNumber = 4;
    private global::AElf.Contracts.Oracle.AddressList designatedNodeList_;
    /// <summary>
    /// Will be association address if count is 1.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.Oracle.AddressList DesignatedNodeList {
      get { return designatedNodeList_; }
      set {
        designatedNodeList_ = value;
      }
    }

    /// <summary>Field number for the "query_info" field.</summary>
    public const int QueryInfoFieldNumber = 5;
    private global::AElf.Contracts.Oracle.QueryInfo queryInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.Oracle.QueryInfo QueryInfo {
      get { return queryInfo_; }
      set {
        queryInfo_ = value;
      }
    }

    /// <summary>Field number for the "aggregate_threshold" field.</summary>
    public const int AggregateThresholdFieldNumber = 6;
    private int aggregateThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AggregateThreshold {
      get { return aggregateThreshold_; }
      set {
        aggregateThreshold_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 7;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Payment != other.Payment) return false;
      if (!object.Equals(CallbackInfo, other.CallbackInfo)) return false;
      if (!object.Equals(AggregatorContractAddress, other.AggregatorContractAddress)) return false;
      if (!object.Equals(DesignatedNodeList, other.DesignatedNodeList)) return false;
      if (!object.Equals(QueryInfo, other.QueryInfo)) return false;
      if (AggregateThreshold != other.AggregateThreshold) return false;
      if (Token != other.Token) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Payment != 0L) hash ^= Payment.GetHashCode();
      if (callbackInfo_ != null) hash ^= CallbackInfo.GetHashCode();
      if (aggregatorContractAddress_ != null) hash ^= AggregatorContractAddress.GetHashCode();
      if (designatedNodeList_ != null) hash ^= DesignatedNodeList.GetHashCode();
      if (queryInfo_ != null) hash ^= QueryInfo.GetHashCode();
      if (AggregateThreshold != 0) hash ^= AggregateThreshold.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Payment != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Payment);
      }
      if (callbackInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CallbackInfo);
      }
      if (aggregatorContractAddress_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(AggregatorContractAddress);
      }
      if (designatedNodeList_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(DesignatedNodeList);
      }
      if (queryInfo_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(QueryInfo);
      }
      if (AggregateThreshold != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(AggregateThreshold);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Token);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Payment != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Payment);
      }
      if (callbackInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CallbackInfo);
      }
      if (aggregatorContractAddress_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(AggregatorContractAddress);
      }
      if (designatedNodeList_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(DesignatedNodeList);
      }
      if (queryInfo_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(QueryInfo);
      }
      if (AggregateThreshold != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(AggregateThreshold);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Token);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Payment != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Payment);
      }
      if (callbackInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CallbackInfo);
      }
      if (aggregatorContractAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AggregatorContractAddress);
      }
      if (designatedNodeList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DesignatedNodeList);
      }
      if (queryInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QueryInfo);
      }
      if (AggregateThreshold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AggregateThreshold);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryInput other) {
      if (other == null) {
        return;
      }
      if (other.Payment != 0L) {
        Payment = other.Payment;
      }
      if (other.callbackInfo_ != null) {
        if (callbackInfo_ == null) {
          CallbackInfo = new global::AElf.Contracts.Oracle.CallbackInfo();
        }
        CallbackInfo.MergeFrom(other.CallbackInfo);
      }
      if (other.aggregatorContractAddress_ != null) {
        if (aggregatorContractAddress_ == null) {
          AggregatorContractAddress = new global::AElf.Types.Address();
        }
        AggregatorContractAddress.MergeFrom(other.AggregatorContractAddress);
      }
      if (other.designatedNodeList_ != null) {
        if (designatedNodeList_ == null) {
          DesignatedNodeList = new global::AElf.Contracts.Oracle.AddressList();
        }
        DesignatedNodeList.MergeFrom(other.DesignatedNodeList);
      }
      if (other.queryInfo_ != null) {
        if (queryInfo_ == null) {
          QueryInfo = new global::AElf.Contracts.Oracle.QueryInfo();
        }
        QueryInfo.MergeFrom(other.QueryInfo);
      }
      if (other.AggregateThreshold != 0) {
        AggregateThreshold = other.AggregateThreshold;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Payment = input.ReadInt64();
            break;
          }
          case 18: {
            if (callbackInfo_ == null) {
              CallbackInfo = new global::AElf.Contracts.Oracle.CallbackInfo();
            }
            input.ReadMessage(CallbackInfo);
            break;
          }
          case 26: {
            if (aggregatorContractAddress_ == null) {
              AggregatorContractAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(AggregatorContractAddress);
            break;
          }
          case 34: {
            if (designatedNodeList_ == null) {
              DesignatedNodeList = new global::AElf.Contracts.Oracle.AddressList();
            }
            input.ReadMessage(DesignatedNodeList);
            break;
          }
          case 42: {
            if (queryInfo_ == null) {
              QueryInfo = new global::AElf.Contracts.Oracle.QueryInfo();
            }
            input.ReadMessage(QueryInfo);
            break;
          }
          case 48: {
            AggregateThreshold = input.ReadInt32();
            break;
          }
          case 58: {
            Token = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Payment = input.ReadInt64();
            break;
          }
          case 18: {
            if (callbackInfo_ == null) {
              CallbackInfo = new global::AElf.Contracts.Oracle.CallbackInfo();
            }
            input.ReadMessage(CallbackInfo);
            break;
          }
          case 26: {
            if (aggregatorContractAddress_ == null) {
              AggregatorContractAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(AggregatorContractAddress);
            break;
          }
          case 34: {
            if (designatedNodeList_ == null) {
              DesignatedNodeList = new global::AElf.Contracts.Oracle.AddressList();
            }
            input.ReadMessage(DesignatedNodeList);
            break;
          }
          case 42: {
            if (queryInfo_ == null) {
              QueryInfo = new global::AElf.Contracts.Oracle.QueryInfo();
            }
            input.ReadMessage(QueryInfo);
            break;
          }
          case 48: {
            AggregateThreshold = input.ReadInt32();
            break;
          }
          case 58: {
            Token = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  internal sealed partial class CallbackInfo : pb::IMessage<CallbackInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CallbackInfo> _parser = new pb::MessageParser<CallbackInfo>(() => new CallbackInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CallbackInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Oracle.OracleContractReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallbackInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallbackInfo(CallbackInfo other) : this() {
      contractAddress_ = other.contractAddress_ != null ? other.contractAddress_.Clone() : null;
      methodName_ = other.methodName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallbackInfo Clone() {
      return new CallbackInfo(this);
    }

    /// <summary>Field number for the "contract_address" field.</summary>
    public const int ContractAddressFieldNumber = 1;
    private global::AElf.Types.Address contractAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address ContractAddress {
      get { return contractAddress_; }
      set {
        contractAddress_ = value;
      }
    }

    /// <summary>Field number for the "method_name" field.</summary>
    public const int MethodNameFieldNumber = 2;
    private string methodName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MethodName {
      get { return methodName_; }
      set {
        methodName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CallbackInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CallbackInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ContractAddress, other.ContractAddress)) return false;
      if (MethodName != other.MethodName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (contractAddress_ != null) hash ^= ContractAddress.GetHashCode();
      if (MethodName.Length != 0) hash ^= MethodName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (contractAddress_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ContractAddress);
      }
      if (MethodName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MethodName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (contractAddress_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ContractAddress);
      }
      if (MethodName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MethodName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (contractAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContractAddress);
      }
      if (MethodName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MethodName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CallbackInfo other) {
      if (other == null) {
        return;
      }
      if (other.contractAddress_ != null) {
        if (contractAddress_ == null) {
          ContractAddress = new global::AElf.Types.Address();
        }
        ContractAddress.MergeFrom(other.ContractAddress);
      }
      if (other.MethodName.Length != 0) {
        MethodName = other.MethodName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (contractAddress_ == null) {
              ContractAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(ContractAddress);
            break;
          }
          case 18: {
            MethodName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (contractAddress_ == null) {
              ContractAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(ContractAddress);
            break;
          }
          case 18: {
            MethodName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  internal sealed partial class AddressList : pb::IMessage<AddressList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AddressList> _parser = new pb::MessageParser<AddressList>(() => new AddressList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddressList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Oracle.OracleContractReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddressList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddressList(AddressList other) : this() {
      value_ = other.value_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddressList Clone() {
      return new AddressList(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AElf.Types.Address> _repeated_value_codec
        = pb::FieldCodec.ForMessage(10, global::AElf.Types.Address.Parser);
    private readonly pbc::RepeatedField<global::AElf.Types.Address> value_ = new pbc::RepeatedField<global::AElf.Types.Address>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Types.Address> Value {
      get { return value_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddressList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddressList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!value_.Equals(other.value_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= value_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      value_.WriteTo(output, _repeated_value_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      value_.WriteTo(ref output, _repeated_value_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += value_.CalculateSize(_repeated_value_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddressList other) {
      if (other == null) {
        return;
      }
      value_.Add(other.value_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            value_.AddEntriesFrom(input, _repeated_value_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            value_.AddEntriesFrom(ref input, _repeated_value_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  internal sealed partial class QueryRecord : pb::IMessage<QueryRecord>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<QueryRecord> _parser = new pb::MessageParser<QueryRecord>(() => new QueryRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Oracle.OracleContractReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryRecord(QueryRecord other) : this() {
      designatedNodeList_ = other.designatedNodeList_ != null ? other.designatedNodeList_.Clone() : null;
      aggregatorContractAddress_ = other.aggregatorContractAddress_ != null ? other.aggregatorContractAddress_.Clone() : null;
      expirationTimestamp_ = other.expirationTimestamp_ != null ? other.expirationTimestamp_.Clone() : null;
      isSufficientCommitmentsCollected_ = other.isSufficientCommitmentsCollected_;
      isSufficientDataCollected_ = other.isSufficientDataCollected_;
      finalResult_ = other.finalResult_;
      payment_ = other.payment_;
      callbackInfo_ = other.callbackInfo_ != null ? other.callbackInfo_.Clone() : null;
      queryId_ = other.queryId_ != null ? other.queryId_.Clone() : null;
      aggregateThreshold_ = other.aggregateThreshold_;
      querySender_ = other.querySender_ != null ? other.querySender_.Clone() : null;
      isCommitStageFinished_ = other.isCommitStageFinished_;
      commitmentsCount_ = other.commitmentsCount_;
      isCancelled_ = other.isCancelled_;
      queryInfo_ = other.queryInfo_ != null ? other.queryInfo_.Clone() : null;
      token_ = other.token_;
      dataRecords_ = other.dataRecords_ != null ? other.dataRecords_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryRecord Clone() {
      return new QueryRecord(this);
    }

    /// <summary>Field number for the "designated_node_list" field.</summary>
    public const int DesignatedNodeListFieldNumber = 1;
    private global::AElf.Contracts.Oracle.AddressList designatedNodeList_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.Oracle.AddressList DesignatedNodeList {
      get { return designatedNodeList_; }
      set {
        designatedNodeList_ = value;
      }
    }

    /// <summary>Field number for the "aggregator_contract_address" field.</summary>
    public const int AggregatorContractAddressFieldNumber = 2;
    private global::AElf.Types.Address aggregatorContractAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address AggregatorContractAddress {
      get { return aggregatorContractAddress_; }
      set {
        aggregatorContractAddress_ = value;
      }
    }

    /// <summary>Field number for the "expiration_timestamp" field.</summary>
    public const int ExpirationTimestampFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp expirationTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ExpirationTimestamp {
      get { return expirationTimestamp_; }
      set {
        expirationTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "is_sufficient_commitments_collected" field.</summary>
    public const int IsSufficientCommitmentsCollectedFieldNumber = 4;
    private bool isSufficientCommitmentsCollected_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSufficientCommitmentsCollected {
      get { return isSufficientCommitmentsCollected_; }
      set {
        isSufficientCommitmentsCollected_ = value;
      }
    }

    /// <summary>Field number for the "is_sufficient_data_collected" field.</summary>
    public const int IsSufficientDataCollectedFieldNumber = 5;
    private bool isSufficientDataCollected_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSufficientDataCollected {
      get { return isSufficientDataCollected_; }
      set {
        isSufficientDataCollected_ = value;
      }
    }

    /// <summary>Field number for the "final_result" field.</summary>
    public const int FinalResultFieldNumber = 6;
    private string finalResult_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FinalResult {
      get { return finalResult_; }
      set {
        finalResult_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payment" field.</summary>
    public const int PaymentFieldNumber = 7;
    private long payment_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Payment {
      get { return payment_; }
      set {
        payment_ = value;
      }
    }

    /// <summary>Field number for the "callback_info" field.</summary>
    public const int CallbackInfoFieldNumber = 8;
    private global::AElf.Contracts.Oracle.CallbackInfo callbackInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.Oracle.CallbackInfo CallbackInfo {
      get { return callbackInfo_; }
      set {
        callbackInfo_ = value;
      }
    }

    /// <summary>Field number for the "query_id" field.</summary>
    public const int QueryIdFieldNumber = 9;
    private global::AElf.Types.Hash queryId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash QueryId {
      get { return queryId_; }
      set {
        queryId_ = value;
      }
    }

    /// <summary>Field number for the "aggregate_threshold" field.</summary>
    public const int AggregateThresholdFieldNumber = 10;
    private int aggregateThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AggregateThreshold {
      get { return aggregateThreshold_; }
      set {
        aggregateThreshold_ = value;
      }
    }

    /// <summary>Field number for the "query_sender" field.</summary>
    public const int QuerySenderFieldNumber = 11;
    private global::AElf.Types.Address querySender_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address QuerySender {
      get { return querySender_; }
      set {
        querySender_ = value;
      }
    }

    /// <summary>Field number for the "is_commit_stage_finished" field.</summary>
    public const int IsCommitStageFinishedFieldNumber = 12;
    private bool isCommitStageFinished_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCommitStageFinished {
      get { return isCommitStageFinished_; }
      set {
        isCommitStageFinished_ = value;
      }
    }

    /// <summary>Field number for the "commitments_count" field.</summary>
    public const int CommitmentsCountFieldNumber = 13;
    private int commitmentsCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CommitmentsCount {
      get { return commitmentsCount_; }
      set {
        commitmentsCount_ = value;
      }
    }

    /// <summary>Field number for the "is_cancelled" field.</summary>
    public const int IsCancelledFieldNumber = 14;
    private bool isCancelled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCancelled {
      get { return isCancelled_; }
      set {
        isCancelled_ = value;
      }
    }

    /// <summary>Field number for the "query_info" field.</summary>
    public const int QueryInfoFieldNumber = 15;
    private global::AElf.Contracts.Oracle.QueryInfo queryInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.Oracle.QueryInfo QueryInfo {
      get { return queryInfo_; }
      set {
        queryInfo_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 16;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data_records" field.</summary>
    public const int DataRecordsFieldNumber = 17;
    private global::AElf.Contracts.Oracle.DataRecords dataRecords_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.Oracle.DataRecords DataRecords {
      get { return dataRecords_; }
      set {
        dataRecords_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DesignatedNodeList, other.DesignatedNodeList)) return false;
      if (!object.Equals(AggregatorContractAddress, other.AggregatorContractAddress)) return false;
      if (!object.Equals(ExpirationTimestamp, other.ExpirationTimestamp)) return false;
      if (IsSufficientCommitmentsCollected != other.IsSufficientCommitmentsCollected) return false;
      if (IsSufficientDataCollected != other.IsSufficientDataCollected) return false;
      if (FinalResult != other.FinalResult) return false;
      if (Payment != other.Payment) return false;
      if (!object.Equals(CallbackInfo, other.CallbackInfo)) return false;
      if (!object.Equals(QueryId, other.QueryId)) return false;
      if (AggregateThreshold != other.AggregateThreshold) return false;
      if (!object.Equals(QuerySender, other.QuerySender)) return false;
      if (IsCommitStageFinished != other.IsCommitStageFinished) return false;
      if (CommitmentsCount != other.CommitmentsCount) return false;
      if (IsCancelled != other.IsCancelled) return false;
      if (!object.Equals(QueryInfo, other.QueryInfo)) return false;
      if (Token != other.Token) return false;
      if (!object.Equals(DataRecords, other.DataRecords)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (designatedNodeList_ != null) hash ^= DesignatedNodeList.GetHashCode();
      if (aggregatorContractAddress_ != null) hash ^= AggregatorContractAddress.GetHashCode();
      if (expirationTimestamp_ != null) hash ^= ExpirationTimestamp.GetHashCode();
      if (IsSufficientCommitmentsCollected != false) hash ^= IsSufficientCommitmentsCollected.GetHashCode();
      if (IsSufficientDataCollected != false) hash ^= IsSufficientDataCollected.GetHashCode();
      if (FinalResult.Length != 0) hash ^= FinalResult.GetHashCode();
      if (Payment != 0L) hash ^= Payment.GetHashCode();
      if (callbackInfo_ != null) hash ^= CallbackInfo.GetHashCode();
      if (queryId_ != null) hash ^= QueryId.GetHashCode();
      if (AggregateThreshold != 0) hash ^= AggregateThreshold.GetHashCode();
      if (querySender_ != null) hash ^= QuerySender.GetHashCode();
      if (IsCommitStageFinished != false) hash ^= IsCommitStageFinished.GetHashCode();
      if (CommitmentsCount != 0) hash ^= CommitmentsCount.GetHashCode();
      if (IsCancelled != false) hash ^= IsCancelled.GetHashCode();
      if (queryInfo_ != null) hash ^= QueryInfo.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (dataRecords_ != null) hash ^= DataRecords.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (designatedNodeList_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DesignatedNodeList);
      }
      if (aggregatorContractAddress_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AggregatorContractAddress);
      }
      if (expirationTimestamp_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ExpirationTimestamp);
      }
      if (IsSufficientCommitmentsCollected != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsSufficientCommitmentsCollected);
      }
      if (IsSufficientDataCollected != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsSufficientDataCollected);
      }
      if (FinalResult.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(FinalResult);
      }
      if (Payment != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Payment);
      }
      if (callbackInfo_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(CallbackInfo);
      }
      if (queryId_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(QueryId);
      }
      if (AggregateThreshold != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(AggregateThreshold);
      }
      if (querySender_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(QuerySender);
      }
      if (IsCommitStageFinished != false) {
        output.WriteRawTag(96);
        output.WriteBool(IsCommitStageFinished);
      }
      if (CommitmentsCount != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(CommitmentsCount);
      }
      if (IsCancelled != false) {
        output.WriteRawTag(112);
        output.WriteBool(IsCancelled);
      }
      if (queryInfo_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(QueryInfo);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Token);
      }
      if (dataRecords_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(DataRecords);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (designatedNodeList_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DesignatedNodeList);
      }
      if (aggregatorContractAddress_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AggregatorContractAddress);
      }
      if (expirationTimestamp_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ExpirationTimestamp);
      }
      if (IsSufficientCommitmentsCollected != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsSufficientCommitmentsCollected);
      }
      if (IsSufficientDataCollected != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsSufficientDataCollected);
      }
      if (FinalResult.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(FinalResult);
      }
      if (Payment != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Payment);
      }
      if (callbackInfo_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(CallbackInfo);
      }
      if (queryId_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(QueryId);
      }
      if (AggregateThreshold != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(AggregateThreshold);
      }
      if (querySender_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(QuerySender);
      }
      if (IsCommitStageFinished != false) {
        output.WriteRawTag(96);
        output.WriteBool(IsCommitStageFinished);
      }
      if (CommitmentsCount != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(CommitmentsCount);
      }
      if (IsCancelled != false) {
        output.WriteRawTag(112);
        output.WriteBool(IsCancelled);
      }
      if (queryInfo_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(QueryInfo);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Token);
      }
      if (dataRecords_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(DataRecords);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (designatedNodeList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DesignatedNodeList);
      }
      if (aggregatorContractAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AggregatorContractAddress);
      }
      if (expirationTimestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExpirationTimestamp);
      }
      if (IsSufficientCommitmentsCollected != false) {
        size += 1 + 1;
      }
      if (IsSufficientDataCollected != false) {
        size += 1 + 1;
      }
      if (FinalResult.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FinalResult);
      }
      if (Payment != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Payment);
      }
      if (callbackInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CallbackInfo);
      }
      if (queryId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QueryId);
      }
      if (AggregateThreshold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AggregateThreshold);
      }
      if (querySender_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QuerySender);
      }
      if (IsCommitStageFinished != false) {
        size += 1 + 1;
      }
      if (CommitmentsCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CommitmentsCount);
      }
      if (IsCancelled != false) {
        size += 1 + 1;
      }
      if (queryInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QueryInfo);
      }
      if (Token.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (dataRecords_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DataRecords);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryRecord other) {
      if (other == null) {
        return;
      }
      if (other.designatedNodeList_ != null) {
        if (designatedNodeList_ == null) {
          DesignatedNodeList = new global::AElf.Contracts.Oracle.AddressList();
        }
        DesignatedNodeList.MergeFrom(other.DesignatedNodeList);
      }
      if (other.aggregatorContractAddress_ != null) {
        if (aggregatorContractAddress_ == null) {
          AggregatorContractAddress = new global::AElf.Types.Address();
        }
        AggregatorContractAddress.MergeFrom(other.AggregatorContractAddress);
      }
      if (other.expirationTimestamp_ != null) {
        if (expirationTimestamp_ == null) {
          ExpirationTimestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ExpirationTimestamp.MergeFrom(other.ExpirationTimestamp);
      }
      if (other.IsSufficientCommitmentsCollected != false) {
        IsSufficientCommitmentsCollected = other.IsSufficientCommitmentsCollected;
      }
      if (other.IsSufficientDataCollected != false) {
        IsSufficientDataCollected = other.IsSufficientDataCollected;
      }
      if (other.FinalResult.Length != 0) {
        FinalResult = other.FinalResult;
      }
      if (other.Payment != 0L) {
        Payment = other.Payment;
      }
      if (other.callbackInfo_ != null) {
        if (callbackInfo_ == null) {
          CallbackInfo = new global::AElf.Contracts.Oracle.CallbackInfo();
        }
        CallbackInfo.MergeFrom(other.CallbackInfo);
      }
      if (other.queryId_ != null) {
        if (queryId_ == null) {
          QueryId = new global::AElf.Types.Hash();
        }
        QueryId.MergeFrom(other.QueryId);
      }
      if (other.AggregateThreshold != 0) {
        AggregateThreshold = other.AggregateThreshold;
      }
      if (other.querySender_ != null) {
        if (querySender_ == null) {
          QuerySender = new global::AElf.Types.Address();
        }
        QuerySender.MergeFrom(other.QuerySender);
      }
      if (other.IsCommitStageFinished != false) {
        IsCommitStageFinished = other.IsCommitStageFinished;
      }
      if (other.CommitmentsCount != 0) {
        CommitmentsCount = other.CommitmentsCount;
      }
      if (other.IsCancelled != false) {
        IsCancelled = other.IsCancelled;
      }
      if (other.queryInfo_ != null) {
        if (queryInfo_ == null) {
          QueryInfo = new global::AElf.Contracts.Oracle.QueryInfo();
        }
        QueryInfo.MergeFrom(other.QueryInfo);
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.dataRecords_ != null) {
        if (dataRecords_ == null) {
          DataRecords = new global::AElf.Contracts.Oracle.DataRecords();
        }
        DataRecords.MergeFrom(other.DataRecords);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (designatedNodeList_ == null) {
              DesignatedNodeList = new global::AElf.Contracts.Oracle.AddressList();
            }
            input.ReadMessage(DesignatedNodeList);
            break;
          }
          case 18: {
            if (aggregatorContractAddress_ == null) {
              AggregatorContractAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(AggregatorContractAddress);
            break;
          }
          case 26: {
            if (expirationTimestamp_ == null) {
              ExpirationTimestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ExpirationTimestamp);
            break;
          }
          case 32: {
            IsSufficientCommitmentsCollected = input.ReadBool();
            break;
          }
          case 40: {
            IsSufficientDataCollected = input.ReadBool();
            break;
          }
          case 50: {
            FinalResult = input.ReadString();
            break;
          }
          case 56: {
            Payment = input.ReadInt64();
            break;
          }
          case 66: {
            if (callbackInfo_ == null) {
              CallbackInfo = new global::AElf.Contracts.Oracle.CallbackInfo();
            }
            input.ReadMessage(CallbackInfo);
            break;
          }
          case 74: {
            if (queryId_ == null) {
              QueryId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(QueryId);
            break;
          }
          case 80: {
            AggregateThreshold = input.ReadInt32();
            break;
          }
          case 90: {
            if (querySender_ == null) {
              QuerySender = new global::AElf.Types.Address();
            }
            input.ReadMessage(QuerySender);
            break;
          }
          case 96: {
            IsCommitStageFinished = input.ReadBool();
            break;
          }
          case 104: {
            CommitmentsCount = input.ReadInt32();
            break;
          }
          case 112: {
            IsCancelled = input.ReadBool();
            break;
          }
          case 122: {
            if (queryInfo_ == null) {
              QueryInfo = new global::AElf.Contracts.Oracle.QueryInfo();
            }
            input.ReadMessage(QueryInfo);
            break;
          }
          case 130: {
            Token = input.ReadString();
            break;
          }
          case 138: {
            if (dataRecords_ == null) {
              DataRecords = new global::AElf.Contracts.Oracle.DataRecords();
            }
            input.ReadMessage(DataRecords);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (designatedNodeList_ == null) {
              DesignatedNodeList = new global::AElf.Contracts.Oracle.AddressList();
            }
            input.ReadMessage(DesignatedNodeList);
            break;
          }
          case 18: {
            if (aggregatorContractAddress_ == null) {
              AggregatorContractAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(AggregatorContractAddress);
            break;
          }
          case 26: {
            if (expirationTimestamp_ == null) {
              ExpirationTimestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ExpirationTimestamp);
            break;
          }
          case 32: {
            IsSufficientCommitmentsCollected = input.ReadBool();
            break;
          }
          case 40: {
            IsSufficientDataCollected = input.ReadBool();
            break;
          }
          case 50: {
            FinalResult = input.ReadString();
            break;
          }
          case 56: {
            Payment = input.ReadInt64();
            break;
          }
          case 66: {
            if (callbackInfo_ == null) {
              CallbackInfo = new global::AElf.Contracts.Oracle.CallbackInfo();
            }
            input.ReadMessage(CallbackInfo);
            break;
          }
          case 74: {
            if (queryId_ == null) {
              QueryId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(QueryId);
            break;
          }
          case 80: {
            AggregateThreshold = input.ReadInt32();
            break;
          }
          case 90: {
            if (querySender_ == null) {
              QuerySender = new global::AElf.Types.Address();
            }
            input.ReadMessage(QuerySender);
            break;
          }
          case 96: {
            IsCommitStageFinished = input.ReadBool();
            break;
          }
          case 104: {
            CommitmentsCount = input.ReadInt32();
            break;
          }
          case 112: {
            IsCancelled = input.ReadBool();
            break;
          }
          case 122: {
            if (queryInfo_ == null) {
              QueryInfo = new global::AElf.Contracts.Oracle.QueryInfo();
            }
            input.ReadMessage(QueryInfo);
            break;
          }
          case 130: {
            Token = input.ReadString();
            break;
          }
          case 138: {
            if (dataRecords_ == null) {
              DataRecords = new global::AElf.Contracts.Oracle.DataRecords();
            }
            input.ReadMessage(DataRecords);
            break;
          }
        }
      }
    }
    #endif

  }

  internal sealed partial class CommitInput : pb::IMessage<CommitInput>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CommitInput> _parser = new pb::MessageParser<CommitInput>(() => new CommitInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommitInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Oracle.OracleContractReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommitInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommitInput(CommitInput other) : this() {
      queryId_ = other.queryId_ != null ? other.queryId_.Clone() : null;
      commitment_ = other.commitment_ != null ? other.commitment_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommitInput Clone() {
      return new CommitInput(this);
    }

    /// <summary>Field number for the "query_id" field.</summary>
    public const int QueryIdFieldNumber = 1;
    private global::AElf.Types.Hash queryId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash QueryId {
      get { return queryId_; }
      set {
        queryId_ = value;
      }
    }

    /// <summary>Field number for the "commitment" field.</summary>
    public const int CommitmentFieldNumber = 2;
    private global::AElf.Types.Hash commitment_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash Commitment {
      get { return commitment_; }
      set {
        commitment_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommitInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommitInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(QueryId, other.QueryId)) return false;
      if (!object.Equals(Commitment, other.Commitment)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (queryId_ != null) hash ^= QueryId.GetHashCode();
      if (commitment_ != null) hash ^= Commitment.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (queryId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(QueryId);
      }
      if (commitment_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Commitment);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (queryId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(QueryId);
      }
      if (commitment_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Commitment);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (queryId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QueryId);
      }
      if (commitment_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Commitment);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommitInput other) {
      if (other == null) {
        return;
      }
      if (other.queryId_ != null) {
        if (queryId_ == null) {
          QueryId = new global::AElf.Types.Hash();
        }
        QueryId.MergeFrom(other.QueryId);
      }
      if (other.commitment_ != null) {
        if (commitment_ == null) {
          Commitment = new global::AElf.Types.Hash();
        }
        Commitment.MergeFrom(other.Commitment);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (queryId_ == null) {
              QueryId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(QueryId);
            break;
          }
          case 18: {
            if (commitment_ == null) {
              Commitment = new global::AElf.Types.Hash();
            }
            input.ReadMessage(Commitment);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (queryId_ == null) {
              QueryId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(QueryId);
            break;
          }
          case 18: {
            if (commitment_ == null) {
              Commitment = new global::AElf.Types.Hash();
            }
            input.ReadMessage(Commitment);
            break;
          }
        }
      }
    }
    #endif

  }

  internal sealed partial class RevealInput : pb::IMessage<RevealInput>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RevealInput> _parser = new pb::MessageParser<RevealInput>(() => new RevealInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RevealInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Oracle.OracleContractReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RevealInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RevealInput(RevealInput other) : this() {
      queryId_ = other.queryId_ != null ? other.queryId_.Clone() : null;
      data_ = other.data_;
      salt_ = other.salt_ != null ? other.salt_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RevealInput Clone() {
      return new RevealInput(this);
    }

    /// <summary>Field number for the "query_id" field.</summary>
    public const int QueryIdFieldNumber = 1;
    private global::AElf.Types.Hash queryId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash QueryId {
      get { return queryId_; }
      set {
        queryId_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private string data_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "salt" field.</summary>
    public const int SaltFieldNumber = 3;
    private global::AElf.Types.Hash salt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash Salt {
      get { return salt_; }
      set {
        salt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RevealInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RevealInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(QueryId, other.QueryId)) return false;
      if (Data != other.Data) return false;
      if (!object.Equals(Salt, other.Salt)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (queryId_ != null) hash ^= QueryId.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (salt_ != null) hash ^= Salt.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (queryId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(QueryId);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Data);
      }
      if (salt_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Salt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (queryId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(QueryId);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Data);
      }
      if (salt_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Salt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (queryId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QueryId);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      if (salt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Salt);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RevealInput other) {
      if (other == null) {
        return;
      }
      if (other.queryId_ != null) {
        if (queryId_ == null) {
          QueryId = new global::AElf.Types.Hash();
        }
        QueryId.MergeFrom(other.QueryId);
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.salt_ != null) {
        if (salt_ == null) {
          Salt = new global::AElf.Types.Hash();
        }
        Salt.MergeFrom(other.Salt);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (queryId_ == null) {
              QueryId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(QueryId);
            break;
          }
          case 18: {
            Data = input.ReadString();
            break;
          }
          case 26: {
            if (salt_ == null) {
              Salt = new global::AElf.Types.Hash();
            }
            input.ReadMessage(Salt);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (queryId_ == null) {
              QueryId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(QueryId);
            break;
          }
          case 18: {
            Data = input.ReadString();
            break;
          }
          case 26: {
            if (salt_ == null) {
              Salt = new global::AElf.Types.Hash();
            }
            input.ReadMessage(Salt);
            break;
          }
        }
      }
    }
    #endif

  }

  internal sealed partial class CommitmentMap : pb::IMessage<CommitmentMap>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CommitmentMap> _parser = new pb::MessageParser<CommitmentMap>(() => new CommitmentMap());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommitmentMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Oracle.OracleContractReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommitmentMap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommitmentMap(CommitmentMap other) : this() {
      value_ = other.value_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommitmentMap Clone() {
      return new CommitmentMap(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private static readonly pbc::MapField<string, global::AElf.Types.Hash>.Codec _map_value_codec
        = new pbc::MapField<string, global::AElf.Types.Hash>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::AElf.Types.Hash.Parser), 10);
    private readonly pbc::MapField<string, global::AElf.Types.Hash> value_ = new pbc::MapField<string, global::AElf.Types.Hash>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::AElf.Types.Hash> Value {
      get { return value_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommitmentMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommitmentMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Value.Equals(other.Value)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      value_.WriteTo(output, _map_value_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      value_.WriteTo(ref output, _map_value_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += value_.CalculateSize(_map_value_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommitmentMap other) {
      if (other == null) {
        return;
      }
      value_.Add(other.value_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            value_.AddEntriesFrom(input, _map_value_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            value_.AddEntriesFrom(ref input, _map_value_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  internal sealed partial class OracleNodeThreshold : pb::IMessage<OracleNodeThreshold>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OracleNodeThreshold> _parser = new pb::MessageParser<OracleNodeThreshold>(() => new OracleNodeThreshold());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OracleNodeThreshold> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Oracle.OracleContractReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OracleNodeThreshold() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OracleNodeThreshold(OracleNodeThreshold other) : this() {
      minimumOracleNodesCount_ = other.minimumOracleNodesCount_;
      defaultRevealThreshold_ = other.defaultRevealThreshold_;
      defaultAggregateThreshold_ = other.defaultAggregateThreshold_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OracleNodeThreshold Clone() {
      return new OracleNodeThreshold(this);
    }

    /// <summary>Field number for the "minimum_oracle_nodes_count" field.</summary>
    public const int MinimumOracleNodesCountFieldNumber = 1;
    private int minimumOracleNodesCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinimumOracleNodesCount {
      get { return minimumOracleNodesCount_; }
      set {
        minimumOracleNodesCount_ = value;
      }
    }

    /// <summary>Field number for the "default_reveal_threshold" field.</summary>
    public const int DefaultRevealThresholdFieldNumber = 2;
    private int defaultRevealThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefaultRevealThreshold {
      get { return defaultRevealThreshold_; }
      set {
        defaultRevealThreshold_ = value;
      }
    }

    /// <summary>Field number for the "default_aggregate_threshold" field.</summary>
    public const int DefaultAggregateThresholdFieldNumber = 3;
    private int defaultAggregateThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefaultAggregateThreshold {
      get { return defaultAggregateThreshold_; }
      set {
        defaultAggregateThreshold_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OracleNodeThreshold);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OracleNodeThreshold other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MinimumOracleNodesCount != other.MinimumOracleNodesCount) return false;
      if (DefaultRevealThreshold != other.DefaultRevealThreshold) return false;
      if (DefaultAggregateThreshold != other.DefaultAggregateThreshold) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MinimumOracleNodesCount != 0) hash ^= MinimumOracleNodesCount.GetHashCode();
      if (DefaultRevealThreshold != 0) hash ^= DefaultRevealThreshold.GetHashCode();
      if (DefaultAggregateThreshold != 0) hash ^= DefaultAggregateThreshold.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MinimumOracleNodesCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MinimumOracleNodesCount);
      }
      if (DefaultRevealThreshold != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DefaultRevealThreshold);
      }
      if (DefaultAggregateThreshold != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DefaultAggregateThreshold);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MinimumOracleNodesCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MinimumOracleNodesCount);
      }
      if (DefaultRevealThreshold != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DefaultRevealThreshold);
      }
      if (DefaultAggregateThreshold != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DefaultAggregateThreshold);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MinimumOracleNodesCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinimumOracleNodesCount);
      }
      if (DefaultRevealThreshold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DefaultRevealThreshold);
      }
      if (DefaultAggregateThreshold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DefaultAggregateThreshold);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OracleNodeThreshold other) {
      if (other == null) {
        return;
      }
      if (other.MinimumOracleNodesCount != 0) {
        MinimumOracleNodesCount = other.MinimumOracleNodesCount;
      }
      if (other.DefaultRevealThreshold != 0) {
        DefaultRevealThreshold = other.DefaultRevealThreshold;
      }
      if (other.DefaultAggregateThreshold != 0) {
        DefaultAggregateThreshold = other.DefaultAggregateThreshold;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MinimumOracleNodesCount = input.ReadInt32();
            break;
          }
          case 16: {
            DefaultRevealThreshold = input.ReadInt32();
            break;
          }
          case 24: {
            DefaultAggregateThreshold = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MinimumOracleNodesCount = input.ReadInt32();
            break;
          }
          case 16: {
            DefaultRevealThreshold = input.ReadInt32();
            break;
          }
          case 24: {
            DefaultAggregateThreshold = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  internal sealed partial class ResultList : pb::IMessage<ResultList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ResultList> _parser = new pb::MessageParser<ResultList>(() => new ResultList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResultList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Oracle.OracleContractReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResultList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResultList(ResultList other) : this() {
      results_ = other.results_.Clone();
      frequencies_ = other.frequencies_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResultList Clone() {
      return new ResultList(this);
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_results_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> results_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Results {
      get { return results_; }
    }

    /// <summary>Field number for the "frequencies" field.</summary>
    public const int FrequenciesFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_frequencies_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> frequencies_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Frequencies {
      get { return frequencies_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResultList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResultList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!results_.Equals(other.results_)) return false;
      if(!frequencies_.Equals(other.frequencies_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= results_.GetHashCode();
      hash ^= frequencies_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      results_.WriteTo(output, _repeated_results_codec);
      frequencies_.WriteTo(output, _repeated_frequencies_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      results_.WriteTo(ref output, _repeated_results_codec);
      frequencies_.WriteTo(ref output, _repeated_frequencies_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += results_.CalculateSize(_repeated_results_codec);
      size += frequencies_.CalculateSize(_repeated_frequencies_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResultList other) {
      if (other == null) {
        return;
      }
      results_.Add(other.results_);
      frequencies_.Add(other.frequencies_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
          case 18:
          case 16: {
            frequencies_.AddEntriesFrom(input, _repeated_frequencies_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            results_.AddEntriesFrom(ref input, _repeated_results_codec);
            break;
          }
          case 18:
          case 16: {
            frequencies_.AddEntriesFrom(ref input, _repeated_frequencies_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  internal sealed partial class DataRecord : pb::IMessage<DataRecord>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DataRecord> _parser = new pb::MessageParser<DataRecord>(() => new DataRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Oracle.OracleContractReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataRecord(DataRecord other) : this() {
      address_ = other.address_ != null ? other.address_.Clone() : null;
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataRecord Clone() {
      return new DataRecord(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private global::AElf.Types.Address address_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private string data_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Address, other.Address)) return false;
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (address_ != null) hash ^= Address.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (address_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Address);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (address_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Address);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (address_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Address);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataRecord other) {
      if (other == null) {
        return;
      }
      if (other.address_ != null) {
        if (address_ == null) {
          Address = new global::AElf.Types.Address();
        }
        Address.MergeFrom(other.Address);
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (address_ == null) {
              Address = new global::AElf.Types.Address();
            }
            input.ReadMessage(Address);
            break;
          }
          case 18: {
            Data = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (address_ == null) {
              Address = new global::AElf.Types.Address();
            }
            input.ReadMessage(Address);
            break;
          }
          case 18: {
            Data = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  internal sealed partial class DataRecords : pb::IMessage<DataRecords>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DataRecords> _parser = new pb::MessageParser<DataRecords>(() => new DataRecords());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataRecords> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Oracle.OracleContractReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataRecords() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataRecords(DataRecords other) : this() {
      value_ = other.value_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataRecords Clone() {
      return new DataRecords(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AElf.Contracts.Oracle.DataRecord> _repeated_value_codec
        = pb::FieldCodec.ForMessage(10, global::AElf.Contracts.Oracle.DataRecord.Parser);
    private readonly pbc::RepeatedField<global::AElf.Contracts.Oracle.DataRecord> value_ = new pbc::RepeatedField<global::AElf.Contracts.Oracle.DataRecord>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Contracts.Oracle.DataRecord> Value {
      get { return value_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataRecords);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataRecords other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!value_.Equals(other.value_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= value_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      value_.WriteTo(output, _repeated_value_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      value_.WriteTo(ref output, _repeated_value_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += value_.CalculateSize(_repeated_value_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataRecords other) {
      if (other == null) {
        return;
      }
      value_.Add(other.value_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            value_.AddEntriesFrom(input, _repeated_value_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            value_.AddEntriesFrom(ref input, _repeated_value_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  internal sealed partial class PlainResult : pb::IMessage<PlainResult>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlainResult> _parser = new pb::MessageParser<PlainResult>(() => new PlainResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlainResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Oracle.OracleContractReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlainResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlainResult(PlainResult other) : this() {
      dataRecords_ = other.dataRecords_ != null ? other.dataRecords_.Clone() : null;
      observerAssociationAddress_ = other.observerAssociationAddress_ != null ? other.observerAssociationAddress_.Clone() : null;
      queryInfo_ = other.queryInfo_ != null ? other.queryInfo_.Clone() : null;
      token_ = other.token_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlainResult Clone() {
      return new PlainResult(this);
    }

    /// <summary>Field number for the "data_records" field.</summary>
    public const int DataRecordsFieldNumber = 1;
    private global::AElf.Contracts.Oracle.DataRecords dataRecords_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.Oracle.DataRecords DataRecords {
      get { return dataRecords_; }
      set {
        dataRecords_ = value;
      }
    }

    /// <summary>Field number for the "observer_association_address" field.</summary>
    public const int ObserverAssociationAddressFieldNumber = 2;
    private global::AElf.Types.Address observerAssociationAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address ObserverAssociationAddress {
      get { return observerAssociationAddress_; }
      set {
        observerAssociationAddress_ = value;
      }
    }

    /// <summary>Field number for the "query_info" field.</summary>
    public const int QueryInfoFieldNumber = 3;
    private global::AElf.Contracts.Oracle.QueryInfo queryInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.Oracle.QueryInfo QueryInfo {
      get { return queryInfo_; }
      set {
        queryInfo_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 4;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlainResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlainResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DataRecords, other.DataRecords)) return false;
      if (!object.Equals(ObserverAssociationAddress, other.ObserverAssociationAddress)) return false;
      if (!object.Equals(QueryInfo, other.QueryInfo)) return false;
      if (Token != other.Token) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (dataRecords_ != null) hash ^= DataRecords.GetHashCode();
      if (observerAssociationAddress_ != null) hash ^= ObserverAssociationAddress.GetHashCode();
      if (queryInfo_ != null) hash ^= QueryInfo.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (dataRecords_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DataRecords);
      }
      if (observerAssociationAddress_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ObserverAssociationAddress);
      }
      if (queryInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(QueryInfo);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Token);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (dataRecords_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DataRecords);
      }
      if (observerAssociationAddress_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ObserverAssociationAddress);
      }
      if (queryInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(QueryInfo);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Token);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (dataRecords_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataRecords);
      }
      if (observerAssociationAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ObserverAssociationAddress);
      }
      if (queryInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QueryInfo);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlainResult other) {
      if (other == null) {
        return;
      }
      if (other.dataRecords_ != null) {
        if (dataRecords_ == null) {
          DataRecords = new global::AElf.Contracts.Oracle.DataRecords();
        }
        DataRecords.MergeFrom(other.DataRecords);
      }
      if (other.observerAssociationAddress_ != null) {
        if (observerAssociationAddress_ == null) {
          ObserverAssociationAddress = new global::AElf.Types.Address();
        }
        ObserverAssociationAddress.MergeFrom(other.ObserverAssociationAddress);
      }
      if (other.queryInfo_ != null) {
        if (queryInfo_ == null) {
          QueryInfo = new global::AElf.Contracts.Oracle.QueryInfo();
        }
        QueryInfo.MergeFrom(other.QueryInfo);
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (dataRecords_ == null) {
              DataRecords = new global::AElf.Contracts.Oracle.DataRecords();
            }
            input.ReadMessage(DataRecords);
            break;
          }
          case 18: {
            if (observerAssociationAddress_ == null) {
              ObserverAssociationAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(ObserverAssociationAddress);
            break;
          }
          case 26: {
            if (queryInfo_ == null) {
              QueryInfo = new global::AElf.Contracts.Oracle.QueryInfo();
            }
            input.ReadMessage(QueryInfo);
            break;
          }
          case 34: {
            Token = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (dataRecords_ == null) {
              DataRecords = new global::AElf.Contracts.Oracle.DataRecords();
            }
            input.ReadMessage(DataRecords);
            break;
          }
          case 18: {
            if (observerAssociationAddress_ == null) {
              ObserverAssociationAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(ObserverAssociationAddress);
            break;
          }
          case 26: {
            if (queryInfo_ == null) {
              QueryInfo = new global::AElf.Contracts.Oracle.QueryInfo();
            }
            input.ReadMessage(QueryInfo);
            break;
          }
          case 34: {
            Token = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  internal sealed partial class LockTokensInput : pb::IMessage<LockTokensInput>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LockTokensInput> _parser = new pb::MessageParser<LockTokensInput>(() => new LockTokensInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LockTokensInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Oracle.OracleContractReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LockTokensInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LockTokensInput(LockTokensInput other) : this() {
      oracleNodeAddress_ = other.oracleNodeAddress_ != null ? other.oracleNodeAddress_.Clone() : null;
      lockAmount_ = other.lockAmount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LockTokensInput Clone() {
      return new LockTokensInput(this);
    }

    /// <summary>Field number for the "oracle_node_address" field.</summary>
    public const int OracleNodeAddressFieldNumber = 1;
    private global::AElf.Types.Address oracleNodeAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address OracleNodeAddress {
      get { return oracleNodeAddress_; }
      set {
        oracleNodeAddress_ = value;
      }
    }

    /// <summary>Field number for the "lock_amount" field.</summary>
    public const int LockAmountFieldNumber = 2;
    private long lockAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LockAmount {
      get { return lockAmount_; }
      set {
        lockAmount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LockTokensInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LockTokensInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(OracleNodeAddress, other.OracleNodeAddress)) return false;
      if (LockAmount != other.LockAmount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (oracleNodeAddress_ != null) hash ^= OracleNodeAddress.GetHashCode();
      if (LockAmount != 0L) hash ^= LockAmount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (oracleNodeAddress_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(OracleNodeAddress);
      }
      if (LockAmount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(LockAmount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (oracleNodeAddress_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(OracleNodeAddress);
      }
      if (LockAmount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(LockAmount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (oracleNodeAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OracleNodeAddress);
      }
      if (LockAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LockAmount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LockTokensInput other) {
      if (other == null) {
        return;
      }
      if (other.oracleNodeAddress_ != null) {
        if (oracleNodeAddress_ == null) {
          OracleNodeAddress = new global::AElf.Types.Address();
        }
        OracleNodeAddress.MergeFrom(other.OracleNodeAddress);
      }
      if (other.LockAmount != 0L) {
        LockAmount = other.LockAmount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (oracleNodeAddress_ == null) {
              OracleNodeAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(OracleNodeAddress);
            break;
          }
          case 16: {
            LockAmount = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (oracleNodeAddress_ == null) {
              OracleNodeAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(OracleNodeAddress);
            break;
          }
          case 16: {
            LockAmount = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  internal sealed partial class UnlockTokensInput : pb::IMessage<UnlockTokensInput>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UnlockTokensInput> _parser = new pb::MessageParser<UnlockTokensInput>(() => new UnlockTokensInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnlockTokensInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Oracle.OracleContractReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnlockTokensInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnlockTokensInput(UnlockTokensInput other) : this() {
      oracleNodeAddress_ = other.oracleNodeAddress_ != null ? other.oracleNodeAddress_.Clone() : null;
      withdrawAmount_ = other.withdrawAmount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnlockTokensInput Clone() {
      return new UnlockTokensInput(this);
    }

    /// <summary>Field number for the "oracle_node_address" field.</summary>
    public const int OracleNodeAddressFieldNumber = 1;
    private global::AElf.Types.Address oracleNodeAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address OracleNodeAddress {
      get { return oracleNodeAddress_; }
      set {
        oracleNodeAddress_ = value;
      }
    }

    /// <summary>Field number for the "withdraw_amount" field.</summary>
    public const int WithdrawAmountFieldNumber = 2;
    private long withdrawAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WithdrawAmount {
      get { return withdrawAmount_; }
      set {
        withdrawAmount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnlockTokensInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnlockTokensInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(OracleNodeAddress, other.OracleNodeAddress)) return false;
      if (WithdrawAmount != other.WithdrawAmount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (oracleNodeAddress_ != null) hash ^= OracleNodeAddress.GetHashCode();
      if (WithdrawAmount != 0L) hash ^= WithdrawAmount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (oracleNodeAddress_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(OracleNodeAddress);
      }
      if (WithdrawAmount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(WithdrawAmount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (oracleNodeAddress_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(OracleNodeAddress);
      }
      if (WithdrawAmount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(WithdrawAmount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (oracleNodeAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OracleNodeAddress);
      }
      if (WithdrawAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WithdrawAmount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnlockTokensInput other) {
      if (other == null) {
        return;
      }
      if (other.oracleNodeAddress_ != null) {
        if (oracleNodeAddress_ == null) {
          OracleNodeAddress = new global::AElf.Types.Address();
        }
        OracleNodeAddress.MergeFrom(other.OracleNodeAddress);
      }
      if (other.WithdrawAmount != 0L) {
        WithdrawAmount = other.WithdrawAmount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (oracleNodeAddress_ == null) {
              OracleNodeAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(OracleNodeAddress);
            break;
          }
          case 16: {
            WithdrawAmount = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (oracleNodeAddress_ == null) {
              OracleNodeAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(OracleNodeAddress);
            break;
          }
          case 16: {
            WithdrawAmount = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  internal sealed partial class QueryInfo : pb::IMessage<QueryInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<QueryInfo> _parser = new pb::MessageParser<QueryInfo>(() => new QueryInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Oracle.OracleContractReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryInfo(QueryInfo other) : this() {
      urlToQuery_ = other.urlToQuery_;
      attributesToFetch_ = other.attributesToFetch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryInfo Clone() {
      return new QueryInfo(this);
    }

    /// <summary>Field number for the "url_to_query" field.</summary>
    public const int UrlToQueryFieldNumber = 1;
    private string urlToQuery_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UrlToQuery {
      get { return urlToQuery_; }
      set {
        urlToQuery_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "attributes_to_fetch" field.</summary>
    public const int AttributesToFetchFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_attributesToFetch_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> attributesToFetch_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> AttributesToFetch {
      get { return attributesToFetch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UrlToQuery != other.UrlToQuery) return false;
      if(!attributesToFetch_.Equals(other.attributesToFetch_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UrlToQuery.Length != 0) hash ^= UrlToQuery.GetHashCode();
      hash ^= attributesToFetch_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (UrlToQuery.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UrlToQuery);
      }
      attributesToFetch_.WriteTo(output, _repeated_attributesToFetch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (UrlToQuery.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UrlToQuery);
      }
      attributesToFetch_.WriteTo(ref output, _repeated_attributesToFetch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UrlToQuery.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UrlToQuery);
      }
      size += attributesToFetch_.CalculateSize(_repeated_attributesToFetch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryInfo other) {
      if (other == null) {
        return;
      }
      if (other.UrlToQuery.Length != 0) {
        UrlToQuery = other.UrlToQuery;
      }
      attributesToFetch_.Add(other.attributesToFetch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UrlToQuery = input.ReadString();
            break;
          }
          case 18: {
            attributesToFetch_.AddEntriesFrom(input, _repeated_attributesToFetch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            UrlToQuery = input.ReadString();
            break;
          }
          case 18: {
            attributesToFetch_.AddEntriesFrom(ref input, _repeated_attributesToFetch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Events
  /// </summary>
  internal sealed partial class QueryCreated : pb::IMessage<QueryCreated>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<QueryCreated> _parser = new pb::MessageParser<QueryCreated>(() => new QueryCreated());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryCreated> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Oracle.OracleContractReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryCreated() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryCreated(QueryCreated other) : this() {
      payment_ = other.payment_;
      callbackInfo_ = other.callbackInfo_ != null ? other.callbackInfo_.Clone() : null;
      aggregatorContractAddress_ = other.aggregatorContractAddress_ != null ? other.aggregatorContractAddress_.Clone() : null;
      designatedNodeList_ = other.designatedNodeList_ != null ? other.designatedNodeList_.Clone() : null;
      queryInfo_ = other.queryInfo_ != null ? other.queryInfo_.Clone() : null;
      aggregateThreshold_ = other.aggregateThreshold_;
      querySender_ = other.querySender_ != null ? other.querySender_.Clone() : null;
      queryId_ = other.queryId_ != null ? other.queryId_.Clone() : null;
      token_ = other.token_;
      maximumPermissibleDeviation_ = other.maximumPermissibleDeviation_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryCreated Clone() {
      return new QueryCreated(this);
    }

    /// <summary>Field number for the "payment" field.</summary>
    public const int PaymentFieldNumber = 1;
    private long payment_;
    /// <summary>
    /// Maximum for this query option.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Payment {
      get { return payment_; }
      set {
        payment_ = value;
      }
    }

    /// <summary>Field number for the "callback_info" field.</summary>
    public const int CallbackInfoFieldNumber = 2;
    private global::AElf.Contracts.Oracle.CallbackInfo callbackInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.Oracle.CallbackInfo CallbackInfo {
      get { return callbackInfo_; }
      set {
        callbackInfo_ = value;
      }
    }

    /// <summary>Field number for the "aggregator_contract_address" field.</summary>
    public const int AggregatorContractAddressFieldNumber = 3;
    private global::AElf.Types.Address aggregatorContractAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address AggregatorContractAddress {
      get { return aggregatorContractAddress_; }
      set {
        aggregatorContractAddress_ = value;
      }
    }

    /// <summary>Field number for the "designated_node_list" field.</summary>
    public const int DesignatedNodeListFieldNumber = 4;
    private global::AElf.Contracts.Oracle.AddressList designatedNodeList_;
    /// <summary>
    /// Will be association address if count is 1.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.Oracle.AddressList DesignatedNodeList {
      get { return designatedNodeList_; }
      set {
        designatedNodeList_ = value;
      }
    }

    /// <summary>Field number for the "query_info" field.</summary>
    public const int QueryInfoFieldNumber = 5;
    private global::AElf.Contracts.Oracle.QueryInfo queryInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.Oracle.QueryInfo QueryInfo {
      get { return queryInfo_; }
      set {
        queryInfo_ = value;
      }
    }

    /// <summary>Field number for the "aggregate_threshold" field.</summary>
    public const int AggregateThresholdFieldNumber = 6;
    private int aggregateThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AggregateThreshold {
      get { return aggregateThreshold_; }
      set {
        aggregateThreshold_ = value;
      }
    }

    /// <summary>Field number for the "query_sender" field.</summary>
    public const int QuerySenderFieldNumber = 7;
    private global::AElf.Types.Address querySender_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address QuerySender {
      get { return querySender_; }
      set {
        querySender_ = value;
      }
    }

    /// <summary>Field number for the "query_id" field.</summary>
    public const int QueryIdFieldNumber = 8;
    private global::AElf.Types.Hash queryId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash QueryId {
      get { return queryId_; }
      set {
        queryId_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 9;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "maximum_permissible_deviation" field.</summary>
    public const int MaximumPermissibleDeviationFieldNumber = 10;
    private int maximumPermissibleDeviation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaximumPermissibleDeviation {
      get { return maximumPermissibleDeviation_; }
      set {
        maximumPermissibleDeviation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryCreated);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryCreated other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Payment != other.Payment) return false;
      if (!object.Equals(CallbackInfo, other.CallbackInfo)) return false;
      if (!object.Equals(AggregatorContractAddress, other.AggregatorContractAddress)) return false;
      if (!object.Equals(DesignatedNodeList, other.DesignatedNodeList)) return false;
      if (!object.Equals(QueryInfo, other.QueryInfo)) return false;
      if (AggregateThreshold != other.AggregateThreshold) return false;
      if (!object.Equals(QuerySender, other.QuerySender)) return false;
      if (!object.Equals(QueryId, other.QueryId)) return false;
      if (Token != other.Token) return false;
      if (MaximumPermissibleDeviation != other.MaximumPermissibleDeviation) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Payment != 0L) hash ^= Payment.GetHashCode();
      if (callbackInfo_ != null) hash ^= CallbackInfo.GetHashCode();
      if (aggregatorContractAddress_ != null) hash ^= AggregatorContractAddress.GetHashCode();
      if (designatedNodeList_ != null) hash ^= DesignatedNodeList.GetHashCode();
      if (queryInfo_ != null) hash ^= QueryInfo.GetHashCode();
      if (AggregateThreshold != 0) hash ^= AggregateThreshold.GetHashCode();
      if (querySender_ != null) hash ^= QuerySender.GetHashCode();
      if (queryId_ != null) hash ^= QueryId.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (MaximumPermissibleDeviation != 0) hash ^= MaximumPermissibleDeviation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Payment != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Payment);
      }
      if (callbackInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CallbackInfo);
      }
      if (aggregatorContractAddress_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(AggregatorContractAddress);
      }
      if (designatedNodeList_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(DesignatedNodeList);
      }
      if (queryInfo_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(QueryInfo);
      }
      if (AggregateThreshold != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(AggregateThreshold);
      }
      if (querySender_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(QuerySender);
      }
      if (queryId_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(QueryId);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Token);
      }
      if (MaximumPermissibleDeviation != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(MaximumPermissibleDeviation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Payment != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Payment);
      }
      if (callbackInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CallbackInfo);
      }
      if (aggregatorContractAddress_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(AggregatorContractAddress);
      }
      if (designatedNodeList_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(DesignatedNodeList);
      }
      if (queryInfo_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(QueryInfo);
      }
      if (AggregateThreshold != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(AggregateThreshold);
      }
      if (querySender_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(QuerySender);
      }
      if (queryId_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(QueryId);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Token);
      }
      if (MaximumPermissibleDeviation != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(MaximumPermissibleDeviation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Payment != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Payment);
      }
      if (callbackInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CallbackInfo);
      }
      if (aggregatorContractAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AggregatorContractAddress);
      }
      if (designatedNodeList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DesignatedNodeList);
      }
      if (queryInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QueryInfo);
      }
      if (AggregateThreshold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AggregateThreshold);
      }
      if (querySender_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QuerySender);
      }
      if (queryId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QueryId);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (MaximumPermissibleDeviation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaximumPermissibleDeviation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryCreated other) {
      if (other == null) {
        return;
      }
      if (other.Payment != 0L) {
        Payment = other.Payment;
      }
      if (other.callbackInfo_ != null) {
        if (callbackInfo_ == null) {
          CallbackInfo = new global::AElf.Contracts.Oracle.CallbackInfo();
        }
        CallbackInfo.MergeFrom(other.CallbackInfo);
      }
      if (other.aggregatorContractAddress_ != null) {
        if (aggregatorContractAddress_ == null) {
          AggregatorContractAddress = new global::AElf.Types.Address();
        }
        AggregatorContractAddress.MergeFrom(other.AggregatorContractAddress);
      }
      if (other.designatedNodeList_ != null) {
        if (designatedNodeList_ == null) {
          DesignatedNodeList = new global::AElf.Contracts.Oracle.AddressList();
        }
        DesignatedNodeList.MergeFrom(other.DesignatedNodeList);
      }
      if (other.queryInfo_ != null) {
        if (queryInfo_ == null) {
          QueryInfo = new global::AElf.Contracts.Oracle.QueryInfo();
        }
        QueryInfo.MergeFrom(other.QueryInfo);
      }
      if (other.AggregateThreshold != 0) {
        AggregateThreshold = other.AggregateThreshold;
      }
      if (other.querySender_ != null) {
        if (querySender_ == null) {
          QuerySender = new global::AElf.Types.Address();
        }
        QuerySender.MergeFrom(other.QuerySender);
      }
      if (other.queryId_ != null) {
        if (queryId_ == null) {
          QueryId = new global::AElf.Types.Hash();
        }
        QueryId.MergeFrom(other.QueryId);
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.MaximumPermissibleDeviation != 0) {
        MaximumPermissibleDeviation = other.MaximumPermissibleDeviation;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Payment = input.ReadInt64();
            break;
          }
          case 18: {
            if (callbackInfo_ == null) {
              CallbackInfo = new global::AElf.Contracts.Oracle.CallbackInfo();
            }
            input.ReadMessage(CallbackInfo);
            break;
          }
          case 26: {
            if (aggregatorContractAddress_ == null) {
              AggregatorContractAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(AggregatorContractAddress);
            break;
          }
          case 34: {
            if (designatedNodeList_ == null) {
              DesignatedNodeList = new global::AElf.Contracts.Oracle.AddressList();
            }
            input.ReadMessage(DesignatedNodeList);
            break;
          }
          case 42: {
            if (queryInfo_ == null) {
              QueryInfo = new global::AElf.Contracts.Oracle.QueryInfo();
            }
            input.ReadMessage(QueryInfo);
            break;
          }
          case 48: {
            AggregateThreshold = input.ReadInt32();
            break;
          }
          case 58: {
            if (querySender_ == null) {
              QuerySender = new global::AElf.Types.Address();
            }
            input.ReadMessage(QuerySender);
            break;
          }
          case 66: {
            if (queryId_ == null) {
              QueryId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(QueryId);
            break;
          }
          case 74: {
            Token = input.ReadString();
            break;
          }
          case 80: {
            MaximumPermissibleDeviation = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Payment = input.ReadInt64();
            break;
          }
          case 18: {
            if (callbackInfo_ == null) {
              CallbackInfo = new global::AElf.Contracts.Oracle.CallbackInfo();
            }
            input.ReadMessage(CallbackInfo);
            break;
          }
          case 26: {
            if (aggregatorContractAddress_ == null) {
              AggregatorContractAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(AggregatorContractAddress);
            break;
          }
          case 34: {
            if (designatedNodeList_ == null) {
              DesignatedNodeList = new global::AElf.Contracts.Oracle.AddressList();
            }
            input.ReadMessage(DesignatedNodeList);
            break;
          }
          case 42: {
            if (queryInfo_ == null) {
              QueryInfo = new global::AElf.Contracts.Oracle.QueryInfo();
            }
            input.ReadMessage(QueryInfo);
            break;
          }
          case 48: {
            AggregateThreshold = input.ReadInt32();
            break;
          }
          case 58: {
            if (querySender_ == null) {
              QuerySender = new global::AElf.Types.Address();
            }
            input.ReadMessage(QuerySender);
            break;
          }
          case 66: {
            if (queryId_ == null) {
              QueryId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(QueryId);
            break;
          }
          case 74: {
            Token = input.ReadString();
            break;
          }
          case 80: {
            MaximumPermissibleDeviation = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  internal sealed partial class QueryCancelled : pb::IMessage<QueryCancelled>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<QueryCancelled> _parser = new pb::MessageParser<QueryCancelled>(() => new QueryCancelled());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryCancelled> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Oracle.OracleContractReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryCancelled() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryCancelled(QueryCancelled other) : this() {
      queryId_ = other.queryId_ != null ? other.queryId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryCancelled Clone() {
      return new QueryCancelled(this);
    }

    /// <summary>Field number for the "query_id" field.</summary>
    public const int QueryIdFieldNumber = 1;
    private global::AElf.Types.Hash queryId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash QueryId {
      get { return queryId_; }
      set {
        queryId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryCancelled);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryCancelled other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(QueryId, other.QueryId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (queryId_ != null) hash ^= QueryId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (queryId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(QueryId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (queryId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(QueryId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (queryId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QueryId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryCancelled other) {
      if (other == null) {
        return;
      }
      if (other.queryId_ != null) {
        if (queryId_ == null) {
          QueryId = new global::AElf.Types.Hash();
        }
        QueryId.MergeFrom(other.QueryId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (queryId_ == null) {
              QueryId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(QueryId);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (queryId_ == null) {
              QueryId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(QueryId);
            break;
          }
        }
      }
    }
    #endif

  }

  internal sealed partial class SufficientCommitmentsCollected : pb::IMessage<SufficientCommitmentsCollected>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SufficientCommitmentsCollected> _parser = new pb::MessageParser<SufficientCommitmentsCollected>(() => new SufficientCommitmentsCollected());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SufficientCommitmentsCollected> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Oracle.OracleContractReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SufficientCommitmentsCollected() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SufficientCommitmentsCollected(SufficientCommitmentsCollected other) : this() {
      queryId_ = other.queryId_ != null ? other.queryId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SufficientCommitmentsCollected Clone() {
      return new SufficientCommitmentsCollected(this);
    }

    /// <summary>Field number for the "query_id" field.</summary>
    public const int QueryIdFieldNumber = 1;
    private global::AElf.Types.Hash queryId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash QueryId {
      get { return queryId_; }
      set {
        queryId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SufficientCommitmentsCollected);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SufficientCommitmentsCollected other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(QueryId, other.QueryId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (queryId_ != null) hash ^= QueryId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (queryId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(QueryId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (queryId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(QueryId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (queryId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QueryId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SufficientCommitmentsCollected other) {
      if (other == null) {
        return;
      }
      if (other.queryId_ != null) {
        if (queryId_ == null) {
          QueryId = new global::AElf.Types.Hash();
        }
        QueryId.MergeFrom(other.QueryId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (queryId_ == null) {
              QueryId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(QueryId);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (queryId_ == null) {
              QueryId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(QueryId);
            break;
          }
        }
      }
    }
    #endif

  }

  internal sealed partial class Committed : pb::IMessage<Committed>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Committed> _parser = new pb::MessageParser<Committed>(() => new Committed());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Committed> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Oracle.OracleContractReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Committed() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Committed(Committed other) : this() {
      queryId_ = other.queryId_ != null ? other.queryId_.Clone() : null;
      oracleNodeAddress_ = other.oracleNodeAddress_ != null ? other.oracleNodeAddress_.Clone() : null;
      commitment_ = other.commitment_ != null ? other.commitment_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Committed Clone() {
      return new Committed(this);
    }

    /// <summary>Field number for the "query_id" field.</summary>
    public const int QueryIdFieldNumber = 1;
    private global::AElf.Types.Hash queryId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash QueryId {
      get { return queryId_; }
      set {
        queryId_ = value;
      }
    }

    /// <summary>Field number for the "oracle_node_address" field.</summary>
    public const int OracleNodeAddressFieldNumber = 2;
    private global::AElf.Types.Address oracleNodeAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address OracleNodeAddress {
      get { return oracleNodeAddress_; }
      set {
        oracleNodeAddress_ = value;
      }
    }

    /// <summary>Field number for the "commitment" field.</summary>
    public const int CommitmentFieldNumber = 3;
    private global::AElf.Types.Hash commitment_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash Commitment {
      get { return commitment_; }
      set {
        commitment_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Committed);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Committed other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(QueryId, other.QueryId)) return false;
      if (!object.Equals(OracleNodeAddress, other.OracleNodeAddress)) return false;
      if (!object.Equals(Commitment, other.Commitment)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (queryId_ != null) hash ^= QueryId.GetHashCode();
      if (oracleNodeAddress_ != null) hash ^= OracleNodeAddress.GetHashCode();
      if (commitment_ != null) hash ^= Commitment.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (queryId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(QueryId);
      }
      if (oracleNodeAddress_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(OracleNodeAddress);
      }
      if (commitment_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Commitment);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (queryId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(QueryId);
      }
      if (oracleNodeAddress_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(OracleNodeAddress);
      }
      if (commitment_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Commitment);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (queryId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QueryId);
      }
      if (oracleNodeAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OracleNodeAddress);
      }
      if (commitment_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Commitment);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Committed other) {
      if (other == null) {
        return;
      }
      if (other.queryId_ != null) {
        if (queryId_ == null) {
          QueryId = new global::AElf.Types.Hash();
        }
        QueryId.MergeFrom(other.QueryId);
      }
      if (other.oracleNodeAddress_ != null) {
        if (oracleNodeAddress_ == null) {
          OracleNodeAddress = new global::AElf.Types.Address();
        }
        OracleNodeAddress.MergeFrom(other.OracleNodeAddress);
      }
      if (other.commitment_ != null) {
        if (commitment_ == null) {
          Commitment = new global::AElf.Types.Hash();
        }
        Commitment.MergeFrom(other.Commitment);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (queryId_ == null) {
              QueryId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(QueryId);
            break;
          }
          case 18: {
            if (oracleNodeAddress_ == null) {
              OracleNodeAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(OracleNodeAddress);
            break;
          }
          case 26: {
            if (commitment_ == null) {
              Commitment = new global::AElf.Types.Hash();
            }
            input.ReadMessage(Commitment);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (queryId_ == null) {
              QueryId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(QueryId);
            break;
          }
          case 18: {
            if (oracleNodeAddress_ == null) {
              OracleNodeAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(OracleNodeAddress);
            break;
          }
          case 26: {
            if (commitment_ == null) {
              Commitment = new global::AElf.Types.Hash();
            }
            input.ReadMessage(Commitment);
            break;
          }
        }
      }
    }
    #endif

  }

  internal sealed partial class CommitmentRevealed : pb::IMessage<CommitmentRevealed>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CommitmentRevealed> _parser = new pb::MessageParser<CommitmentRevealed>(() => new CommitmentRevealed());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommitmentRevealed> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Oracle.OracleContractReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommitmentRevealed() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommitmentRevealed(CommitmentRevealed other) : this() {
      queryId_ = other.queryId_ != null ? other.queryId_.Clone() : null;
      oracleNodeAddress_ = other.oracleNodeAddress_ != null ? other.oracleNodeAddress_.Clone() : null;
      commitment_ = other.commitment_ != null ? other.commitment_.Clone() : null;
      revealData_ = other.revealData_;
      salt_ = other.salt_ != null ? other.salt_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommitmentRevealed Clone() {
      return new CommitmentRevealed(this);
    }

    /// <summary>Field number for the "query_id" field.</summary>
    public const int QueryIdFieldNumber = 1;
    private global::AElf.Types.Hash queryId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash QueryId {
      get { return queryId_; }
      set {
        queryId_ = value;
      }
    }

    /// <summary>Field number for the "oracle_node_address" field.</summary>
    public const int OracleNodeAddressFieldNumber = 2;
    private global::AElf.Types.Address oracleNodeAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address OracleNodeAddress {
      get { return oracleNodeAddress_; }
      set {
        oracleNodeAddress_ = value;
      }
    }

    /// <summary>Field number for the "commitment" field.</summary>
    public const int CommitmentFieldNumber = 3;
    private global::AElf.Types.Hash commitment_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash Commitment {
      get { return commitment_; }
      set {
        commitment_ = value;
      }
    }

    /// <summary>Field number for the "reveal_data" field.</summary>
    public const int RevealDataFieldNumber = 4;
    private string revealData_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RevealData {
      get { return revealData_; }
      set {
        revealData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "salt" field.</summary>
    public const int SaltFieldNumber = 5;
    private global::AElf.Types.Hash salt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash Salt {
      get { return salt_; }
      set {
        salt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommitmentRevealed);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommitmentRevealed other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(QueryId, other.QueryId)) return false;
      if (!object.Equals(OracleNodeAddress, other.OracleNodeAddress)) return false;
      if (!object.Equals(Commitment, other.Commitment)) return false;
      if (RevealData != other.RevealData) return false;
      if (!object.Equals(Salt, other.Salt)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (queryId_ != null) hash ^= QueryId.GetHashCode();
      if (oracleNodeAddress_ != null) hash ^= OracleNodeAddress.GetHashCode();
      if (commitment_ != null) hash ^= Commitment.GetHashCode();
      if (RevealData.Length != 0) hash ^= RevealData.GetHashCode();
      if (salt_ != null) hash ^= Salt.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (queryId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(QueryId);
      }
      if (oracleNodeAddress_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(OracleNodeAddress);
      }
      if (commitment_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Commitment);
      }
      if (RevealData.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RevealData);
      }
      if (salt_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Salt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (queryId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(QueryId);
      }
      if (oracleNodeAddress_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(OracleNodeAddress);
      }
      if (commitment_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Commitment);
      }
      if (RevealData.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RevealData);
      }
      if (salt_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Salt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (queryId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QueryId);
      }
      if (oracleNodeAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OracleNodeAddress);
      }
      if (commitment_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Commitment);
      }
      if (RevealData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RevealData);
      }
      if (salt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Salt);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommitmentRevealed other) {
      if (other == null) {
        return;
      }
      if (other.queryId_ != null) {
        if (queryId_ == null) {
          QueryId = new global::AElf.Types.Hash();
        }
        QueryId.MergeFrom(other.QueryId);
      }
      if (other.oracleNodeAddress_ != null) {
        if (oracleNodeAddress_ == null) {
          OracleNodeAddress = new global::AElf.Types.Address();
        }
        OracleNodeAddress.MergeFrom(other.OracleNodeAddress);
      }
      if (other.commitment_ != null) {
        if (commitment_ == null) {
          Commitment = new global::AElf.Types.Hash();
        }
        Commitment.MergeFrom(other.Commitment);
      }
      if (other.RevealData.Length != 0) {
        RevealData = other.RevealData;
      }
      if (other.salt_ != null) {
        if (salt_ == null) {
          Salt = new global::AElf.Types.Hash();
        }
        Salt.MergeFrom(other.Salt);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (queryId_ == null) {
              QueryId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(QueryId);
            break;
          }
          case 18: {
            if (oracleNodeAddress_ == null) {
              OracleNodeAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(OracleNodeAddress);
            break;
          }
          case 26: {
            if (commitment_ == null) {
              Commitment = new global::AElf.Types.Hash();
            }
            input.ReadMessage(Commitment);
            break;
          }
          case 34: {
            RevealData = input.ReadString();
            break;
          }
          case 42: {
            if (salt_ == null) {
              Salt = new global::AElf.Types.Hash();
            }
            input.ReadMessage(Salt);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (queryId_ == null) {
              QueryId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(QueryId);
            break;
          }
          case 18: {
            if (oracleNodeAddress_ == null) {
              OracleNodeAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(OracleNodeAddress);
            break;
          }
          case 26: {
            if (commitment_ == null) {
              Commitment = new global::AElf.Types.Hash();
            }
            input.ReadMessage(Commitment);
            break;
          }
          case 34: {
            RevealData = input.ReadString();
            break;
          }
          case 42: {
            if (salt_ == null) {
              Salt = new global::AElf.Types.Hash();
            }
            input.ReadMessage(Salt);
            break;
          }
        }
      }
    }
    #endif

  }

  internal sealed partial class CommitmentRevealFailed : pb::IMessage<CommitmentRevealFailed>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CommitmentRevealFailed> _parser = new pb::MessageParser<CommitmentRevealFailed>(() => new CommitmentRevealFailed());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommitmentRevealFailed> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Oracle.OracleContractReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommitmentRevealFailed() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommitmentRevealFailed(CommitmentRevealFailed other) : this() {
      queryId_ = other.queryId_ != null ? other.queryId_.Clone() : null;
      oracleNodeAddress_ = other.oracleNodeAddress_ != null ? other.oracleNodeAddress_.Clone() : null;
      commitment_ = other.commitment_ != null ? other.commitment_.Clone() : null;
      revealData_ = other.revealData_;
      salt_ = other.salt_ != null ? other.salt_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommitmentRevealFailed Clone() {
      return new CommitmentRevealFailed(this);
    }

    /// <summary>Field number for the "query_id" field.</summary>
    public const int QueryIdFieldNumber = 1;
    private global::AElf.Types.Hash queryId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash QueryId {
      get { return queryId_; }
      set {
        queryId_ = value;
      }
    }

    /// <summary>Field number for the "oracle_node_address" field.</summary>
    public const int OracleNodeAddressFieldNumber = 2;
    private global::AElf.Types.Address oracleNodeAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address OracleNodeAddress {
      get { return oracleNodeAddress_; }
      set {
        oracleNodeAddress_ = value;
      }
    }

    /// <summary>Field number for the "commitment" field.</summary>
    public const int CommitmentFieldNumber = 3;
    private global::AElf.Types.Hash commitment_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash Commitment {
      get { return commitment_; }
      set {
        commitment_ = value;
      }
    }

    /// <summary>Field number for the "reveal_data" field.</summary>
    public const int RevealDataFieldNumber = 4;
    private string revealData_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RevealData {
      get { return revealData_; }
      set {
        revealData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "salt" field.</summary>
    public const int SaltFieldNumber = 5;
    private global::AElf.Types.Hash salt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash Salt {
      get { return salt_; }
      set {
        salt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommitmentRevealFailed);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommitmentRevealFailed other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(QueryId, other.QueryId)) return false;
      if (!object.Equals(OracleNodeAddress, other.OracleNodeAddress)) return false;
      if (!object.Equals(Commitment, other.Commitment)) return false;
      if (RevealData != other.RevealData) return false;
      if (!object.Equals(Salt, other.Salt)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (queryId_ != null) hash ^= QueryId.GetHashCode();
      if (oracleNodeAddress_ != null) hash ^= OracleNodeAddress.GetHashCode();
      if (commitment_ != null) hash ^= Commitment.GetHashCode();
      if (RevealData.Length != 0) hash ^= RevealData.GetHashCode();
      if (salt_ != null) hash ^= Salt.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (queryId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(QueryId);
      }
      if (oracleNodeAddress_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(OracleNodeAddress);
      }
      if (commitment_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Commitment);
      }
      if (RevealData.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RevealData);
      }
      if (salt_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Salt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (queryId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(QueryId);
      }
      if (oracleNodeAddress_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(OracleNodeAddress);
      }
      if (commitment_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Commitment);
      }
      if (RevealData.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RevealData);
      }
      if (salt_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Salt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (queryId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QueryId);
      }
      if (oracleNodeAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OracleNodeAddress);
      }
      if (commitment_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Commitment);
      }
      if (RevealData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RevealData);
      }
      if (salt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Salt);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommitmentRevealFailed other) {
      if (other == null) {
        return;
      }
      if (other.queryId_ != null) {
        if (queryId_ == null) {
          QueryId = new global::AElf.Types.Hash();
        }
        QueryId.MergeFrom(other.QueryId);
      }
      if (other.oracleNodeAddress_ != null) {
        if (oracleNodeAddress_ == null) {
          OracleNodeAddress = new global::AElf.Types.Address();
        }
        OracleNodeAddress.MergeFrom(other.OracleNodeAddress);
      }
      if (other.commitment_ != null) {
        if (commitment_ == null) {
          Commitment = new global::AElf.Types.Hash();
        }
        Commitment.MergeFrom(other.Commitment);
      }
      if (other.RevealData.Length != 0) {
        RevealData = other.RevealData;
      }
      if (other.salt_ != null) {
        if (salt_ == null) {
          Salt = new global::AElf.Types.Hash();
        }
        Salt.MergeFrom(other.Salt);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (queryId_ == null) {
              QueryId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(QueryId);
            break;
          }
          case 18: {
            if (oracleNodeAddress_ == null) {
              OracleNodeAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(OracleNodeAddress);
            break;
          }
          case 26: {
            if (commitment_ == null) {
              Commitment = new global::AElf.Types.Hash();
            }
            input.ReadMessage(Commitment);
            break;
          }
          case 34: {
            RevealData = input.ReadString();
            break;
          }
          case 42: {
            if (salt_ == null) {
              Salt = new global::AElf.Types.Hash();
            }
            input.ReadMessage(Salt);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (queryId_ == null) {
              QueryId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(QueryId);
            break;
          }
          case 18: {
            if (oracleNodeAddress_ == null) {
              OracleNodeAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(OracleNodeAddress);
            break;
          }
          case 26: {
            if (commitment_ == null) {
              Commitment = new global::AElf.Types.Hash();
            }
            input.ReadMessage(Commitment);
            break;
          }
          case 34: {
            RevealData = input.ReadString();
            break;
          }
          case 42: {
            if (salt_ == null) {
              Salt = new global::AElf.Types.Hash();
            }
            input.ReadMessage(Salt);
            break;
          }
        }
      }
    }
    #endif

  }

  internal sealed partial class QueryCompletedWithAggregation : pb::IMessage<QueryCompletedWithAggregation>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<QueryCompletedWithAggregation> _parser = new pb::MessageParser<QueryCompletedWithAggregation>(() => new QueryCompletedWithAggregation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryCompletedWithAggregation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Oracle.OracleContractReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryCompletedWithAggregation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryCompletedWithAggregation(QueryCompletedWithAggregation other) : this() {
      queryId_ = other.queryId_ != null ? other.queryId_.Clone() : null;
      result_ = other.result_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryCompletedWithAggregation Clone() {
      return new QueryCompletedWithAggregation(this);
    }

    /// <summary>Field number for the "query_id" field.</summary>
    public const int QueryIdFieldNumber = 1;
    private global::AElf.Types.Hash queryId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash QueryId {
      get { return queryId_; }
      set {
        queryId_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private string result_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Result {
      get { return result_; }
      set {
        result_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryCompletedWithAggregation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryCompletedWithAggregation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(QueryId, other.QueryId)) return false;
      if (Result != other.Result) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (queryId_ != null) hash ^= QueryId.GetHashCode();
      if (Result.Length != 0) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (queryId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(QueryId);
      }
      if (Result.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (queryId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(QueryId);
      }
      if (Result.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (queryId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QueryId);
      }
      if (Result.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryCompletedWithAggregation other) {
      if (other == null) {
        return;
      }
      if (other.queryId_ != null) {
        if (queryId_ == null) {
          QueryId = new global::AElf.Types.Hash();
        }
        QueryId.MergeFrom(other.QueryId);
      }
      if (other.Result.Length != 0) {
        Result = other.Result;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (queryId_ == null) {
              QueryId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(QueryId);
            break;
          }
          case 18: {
            Result = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (queryId_ == null) {
              QueryId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(QueryId);
            break;
          }
          case 18: {
            Result = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  internal sealed partial class QueryCompletedWithoutAggregation : pb::IMessage<QueryCompletedWithoutAggregation>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<QueryCompletedWithoutAggregation> _parser = new pb::MessageParser<QueryCompletedWithoutAggregation>(() => new QueryCompletedWithoutAggregation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryCompletedWithoutAggregation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Oracle.OracleContractReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryCompletedWithoutAggregation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryCompletedWithoutAggregation(QueryCompletedWithoutAggregation other) : this() {
      queryId_ = other.queryId_ != null ? other.queryId_.Clone() : null;
      result_ = other.result_ != null ? other.result_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryCompletedWithoutAggregation Clone() {
      return new QueryCompletedWithoutAggregation(this);
    }

    /// <summary>Field number for the "query_id" field.</summary>
    public const int QueryIdFieldNumber = 1;
    private global::AElf.Types.Hash queryId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash QueryId {
      get { return queryId_; }
      set {
        queryId_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private global::AElf.Contracts.Oracle.PlainResult result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.Oracle.PlainResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryCompletedWithoutAggregation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryCompletedWithoutAggregation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(QueryId, other.QueryId)) return false;
      if (!object.Equals(Result, other.Result)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (queryId_ != null) hash ^= QueryId.GetHashCode();
      if (result_ != null) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (queryId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(QueryId);
      }
      if (result_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (queryId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(QueryId);
      }
      if (result_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (queryId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QueryId);
      }
      if (result_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryCompletedWithoutAggregation other) {
      if (other == null) {
        return;
      }
      if (other.queryId_ != null) {
        if (queryId_ == null) {
          QueryId = new global::AElf.Types.Hash();
        }
        QueryId.MergeFrom(other.QueryId);
      }
      if (other.result_ != null) {
        if (result_ == null) {
          Result = new global::AElf.Contracts.Oracle.PlainResult();
        }
        Result.MergeFrom(other.Result);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (queryId_ == null) {
              QueryId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(QueryId);
            break;
          }
          case 18: {
            if (result_ == null) {
              Result = new global::AElf.Contracts.Oracle.PlainResult();
            }
            input.ReadMessage(Result);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (queryId_ == null) {
              QueryId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(QueryId);
            break;
          }
          case 18: {
            if (result_ == null) {
              Result = new global::AElf.Contracts.Oracle.PlainResult();
            }
            input.ReadMessage(Result);
            break;
          }
        }
      }
    }
    #endif

  }

  internal sealed partial class TokenLocked : pb::IMessage<TokenLocked>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TokenLocked> _parser = new pb::MessageParser<TokenLocked>(() => new TokenLocked());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TokenLocked> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Oracle.OracleContractReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenLocked() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenLocked(TokenLocked other) : this() {
      oracleNodeAddress_ = other.oracleNodeAddress_ != null ? other.oracleNodeAddress_.Clone() : null;
      fromAddress_ = other.fromAddress_ != null ? other.fromAddress_.Clone() : null;
      lockedAmount_ = other.lockedAmount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenLocked Clone() {
      return new TokenLocked(this);
    }

    /// <summary>Field number for the "oracle_node_address" field.</summary>
    public const int OracleNodeAddressFieldNumber = 1;
    private global::AElf.Types.Address oracleNodeAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address OracleNodeAddress {
      get { return oracleNodeAddress_; }
      set {
        oracleNodeAddress_ = value;
      }
    }

    /// <summary>Field number for the "from_address" field.</summary>
    public const int FromAddressFieldNumber = 2;
    private global::AElf.Types.Address fromAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address FromAddress {
      get { return fromAddress_; }
      set {
        fromAddress_ = value;
      }
    }

    /// <summary>Field number for the "locked_amount" field.</summary>
    public const int LockedAmountFieldNumber = 3;
    private long lockedAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LockedAmount {
      get { return lockedAmount_; }
      set {
        lockedAmount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TokenLocked);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TokenLocked other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(OracleNodeAddress, other.OracleNodeAddress)) return false;
      if (!object.Equals(FromAddress, other.FromAddress)) return false;
      if (LockedAmount != other.LockedAmount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (oracleNodeAddress_ != null) hash ^= OracleNodeAddress.GetHashCode();
      if (fromAddress_ != null) hash ^= FromAddress.GetHashCode();
      if (LockedAmount != 0L) hash ^= LockedAmount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (oracleNodeAddress_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(OracleNodeAddress);
      }
      if (fromAddress_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(FromAddress);
      }
      if (LockedAmount != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(LockedAmount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (oracleNodeAddress_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(OracleNodeAddress);
      }
      if (fromAddress_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(FromAddress);
      }
      if (LockedAmount != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(LockedAmount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (oracleNodeAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OracleNodeAddress);
      }
      if (fromAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FromAddress);
      }
      if (LockedAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LockedAmount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TokenLocked other) {
      if (other == null) {
        return;
      }
      if (other.oracleNodeAddress_ != null) {
        if (oracleNodeAddress_ == null) {
          OracleNodeAddress = new global::AElf.Types.Address();
        }
        OracleNodeAddress.MergeFrom(other.OracleNodeAddress);
      }
      if (other.fromAddress_ != null) {
        if (fromAddress_ == null) {
          FromAddress = new global::AElf.Types.Address();
        }
        FromAddress.MergeFrom(other.FromAddress);
      }
      if (other.LockedAmount != 0L) {
        LockedAmount = other.LockedAmount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (oracleNodeAddress_ == null) {
              OracleNodeAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(OracleNodeAddress);
            break;
          }
          case 18: {
            if (fromAddress_ == null) {
              FromAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(FromAddress);
            break;
          }
          case 24: {
            LockedAmount = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (oracleNodeAddress_ == null) {
              OracleNodeAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(OracleNodeAddress);
            break;
          }
          case 18: {
            if (fromAddress_ == null) {
              FromAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(FromAddress);
            break;
          }
          case 24: {
            LockedAmount = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
