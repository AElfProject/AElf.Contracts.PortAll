syntax = "proto3";

import "aelf/core.proto";
import "aelf/options.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";

option csharp_namespace = "AElf.Contracts.Lottery";


// Only for the activity after eth2aelf ELF token swap.
service LotteryContract {
    option (aelf.csharp_state) = "AElf.Contracts.Lottery.LotteryContractState";

    // Admin
    rpc Initialize (InitializeInput) returns (google.protobuf.Empty) {
    }
    rpc Draw (DrawInput) returns (google.protobuf.Empty) {
    }

    // User
    rpc Stake (google.protobuf.Int64Value) returns (OwnLottery) {
    }
    rpc Redeem (google.protobuf.Empty) returns (google.protobuf.Empty) {
    }
    rpc Claim (google.protobuf.Empty) returns (google.protobuf.Empty) {
    }

    // Views
    rpc GetCurrentPeriodId (google.protobuf.Empty) returns (google.protobuf.Int32Value) {
        option (aelf.is_view) = true;
    }
    rpc GetLotteryCount (google.protobuf.Empty) returns (google.protobuf.Int64Value) {
        option (aelf.is_view) = true;
    }
    rpc GetLotteryCodeList (aelf.Address) returns (Int64List) {
        option (aelf.is_view) = true;
    }
    rpc GetWinningRecord (aelf.Address) returns (Int64List) {
        option (aelf.is_view) = true;
    }
    rpc GetAwardList (google.protobuf.Int64Value) returns (AwardList) {
        option (aelf.is_view) = true;
    }
    rpc GetLottery (google.protobuf.Int64Value) returns (Lottery) {
        option (aelf.is_view) = true;
    }
    rpc GetStakingAmount (aelf.Address) returns (google.protobuf.Int64Value) {
        option (aelf.is_view) = true;
    }
    rpc GetOwnLottery (aelf.Address) returns (OwnLottery) {
        option (aelf.is_view) = true;
    }
}

// Lottery Code: int64
// Period Id: int32
// Token Amount: int64

message InitializeInput {
    google.protobuf.Timestamp start_timestamp = 1;
    google.protobuf.Timestamp shutdown_timestamp = 2;
    google.protobuf.Timestamp redeem_timestamp = 3;
    repeated int64 default_award_list = 4; 
}

message StakeInput {
    int32 amount = 1;
}

message OwnLottery {
    repeated int64 lottery_code_list = 1;
    int64 total_staking_amount = 2;
    int64 total_award_amount = 3;
    int64 claimed_award_amount = 4;
    bool is_redeemed = 5;
}

message Lottery {
    int64 lottery_code = 1;
    google.protobuf.Timestamp issue_timestamp = 2;
    repeated int64 award_id_list = 3;
    aelf.Address owner = 4;
    int64 latest_claimed_award_id = 5;
}

// Show lottery codes.
message Int64List {
    repeated int64 value = 1;
}

message WinningRecord {
    map<int32, Award> history = 1;// Period id -> Award information
    int64 total_amount = 2;// Sum award_amounts up
}

message Award {
    int64 award_id = 1;
    int64 award_amount = 2;
    int64 lottery_code = 3;
    bool is_claimed = 4;
}

message AwardList {
    repeated Award value = 1;
}

message PeriodAward {
    int32 period_id = 1;
    google.protobuf.Timestamp start_timestamp = 2;
    google.protobuf.Timestamp end_timestamp = 3;// Also draw timestamp
    aelf.Hash use_random_hash = 4;
    int64 start_award_id = 5;
    int64 end_award_id = 6;
}

message DrawInput {
    int32 period_id = 1;
    repeated int64 next_award_list = 2; 
}