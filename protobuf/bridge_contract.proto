syntax = "proto3";

import "aelf/core.proto";
import "aelf/options.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "callback_input.proto";
import "acs13.proto";

option csharp_namespace = "AElf.Contracts.Bridge";

service BridgeContract {
    option (aelf.csharp_state) = "AElf.Contracts.Bridge.BridgeContractState";
    option (aelf.base) = "acs13.proto";

    rpc Initialize (InitializeInput) returns (google.protobuf.Empty) {}

    rpc CreateBridge (CreateBridgeInput) returns (google.protobuf.Empty) {}

    rpc Transfer (TransferInput) returns (google.protobuf.Empty) {
    }
    rpc TransferFrom (TransferFromInput) returns (google.protobuf.Empty) {
    }
    rpc Approve (ApproveInput) returns (google.protobuf.Empty) {
    }
    rpc UnApprove (UnApproveInput) returns (google.protobuf.Empty) {
    }
    rpc Burn (BurnInput) returns (google.protobuf.Empty) {
    }

    // view methods
    
    rpc GetController (google.protobuf.Empty) returns (aelf.Address) {
        option (aelf.is_view) = true;
    }
    rpc GetBridgeTokenInfo (GetBridgeTokenInfoInput) returns (BridgeTokenInfo) {
        option (aelf.is_view) = true;
    }
    rpc GetBalance (GetBalanceInput) returns (Balance) {
        option (aelf.is_view) = true;
    }
    rpc GetAllowance (GetAllowanceInput) returns (Allowance) {
        option (aelf.is_view) = true;
    }
}

message InitializeInput {
    aelf.Address oracle_contract_address = 1;
}

message CreateBridgeInput {
    BridgeTokenInfo origin_token_info = 1;
    string wrapped_token_symbol = 2;
}

message BridgeTokenInfo {
    string symbol = 1;
    string from_chain_name = 2;
    string bridge_type = 3;// ERC20, ERC721, ...
    string lock_contract_address = 4;
    bool is_native_token = 5;
}

message TransferFromInput {
    aelf.Address from = 1;
    aelf.Address to = 2;
    string symbol = 3;
    int64 amount = 4;
    string memo = 5;
}

message GetBridgeTokenInfoInput {

}

message TransferInput {
    aelf.Address to = 1;
    string symbol = 2;
    int64 amount = 3;
    string memo = 4;
}

message ApproveInput {
    aelf.Address spender = 1;
    string symbol = 2;
    int64 amount = 3;
}

message UnApproveInput {
    aelf.Address spender = 1;
    string symbol = 2;
    int64 amount = 3;
}

message BurnInput {
    string symbol = 1;
    int64 amount = 2;
}

message GetBalanceInput {
    string symbol = 1;
    aelf.Address owner = 2;
}

message Balance {
    string symbol = 1;
    aelf.Address owner = 2;
    int64 balance = 3;
}

message GetAllowanceInput {
    string symbol = 1;
    aelf.Address owner = 2;
    aelf.Address spender = 3;
}

message Allowance {
    string symbol = 1;
    aelf.Address owner = 2;
    aelf.Address spender = 3;
    int64 allowance = 4;
}

// Events

message Transferred {
    option (aelf.is_event) = true;
    aelf.Address from = 1 [(aelf.is_indexed) = true];
    aelf.Address to = 2 [(aelf.is_indexed) = true];
    string symbol = 3 [(aelf.is_indexed) = true];
    int64 amount = 4;
    string memo = 5;
}

message Approved {
    option (aelf.is_event) = true;
    aelf.Address owner = 1 [(aelf.is_indexed) = true];
    aelf.Address spender = 2 [(aelf.is_indexed) = true];
    string symbol = 3 [(aelf.is_indexed) = true];
    int64 amount = 4;
}

message UnApproved {
    option (aelf.is_event) = true;
    aelf.Address owner = 1 [(aelf.is_indexed) = true];
    aelf.Address spender = 2 [(aelf.is_indexed) = true];
    string symbol = 3 [(aelf.is_indexed) = true];
    int64 amount = 4;
}

message Burned
{
    option (aelf.is_event) = true;
    aelf.Address burner = 1 [(aelf.is_indexed) = true];
    string symbol = 2 [(aelf.is_indexed) = true];
    int64 amount = 3;
}

message BridgeCreated {
    option (aelf.is_event) = true;
    BridgeTokenInfo origin_token_info = 1;
    string wrapped_token_symbol = 2;
}